{
    "schemaVersion": "1.0.0",
    "imports":
    [
        "js/aw-panel-header.directive",
        "js/aw-form.directive",
        "js/aw-add.directive",
        "js/aw-panel-footer.directive",
        "js/aw-button.directive",
        "js/aw-i18n.directive",
        "js/aw-include.directive"
    ],
    "data":
    {
    },
    "actions":
    {

        "createAndInsertElement": {
            "actionType": "Event",

            "method": "Event",
            "inputData": {
                "events": [ {
                    "name": "addObject.startCreateObject"
                } ]
            }
        },
        "insertElements":{
            "actionType": "TcSoaService",
            "serviceName": "Internal-ActiveWorkspaceBom-2020-12-OccurrenceManagement",
            "method": "insertLevel2",
            "inputData":{
                "insertLevelInput":{
                    "elements":"{{ctx.aceActiveContext.context.insertLevelInput.selectedElements}}",
                    "objectToBeInserted":"{{function:getParentElementToInsertLevel}}",
                    "productContext":"{{ctx.aceActiveContext.context.productContextInfo}}",
                    "sortCriteria":{
                        "propertyName": "{{ctx.aceActiveContext.context.sortCriteria[0].fieldName}}",
                        "sortingOrder": "{{ctx.aceActiveContext.context.sortCriteria[0].sortDirection}}"
                    }
                }
            },
            "outputData": {
                "insertElementResponse":""
            },
            "events":{
                "success":[{
                    "name": "insertElement.clearCreatedElementField"
                },
                {
                    "name": "insertLevel.elementsInserted",
                    "eventData": {
                        "insertElementResponse": "{{data.insertElementResponse}}",
                        "viewToReact": "{{ctx.aceActiveContext.key}}"
                    }
                },
                {
                    "name": "aceElementsSelectionUpdatedEvent",
                    "eventData": {
                        "objectsToSelect": ["{{data.insertElementResponse.newParent}}"]
                    }
                }
            ],
            "failure": [ {
                "name": "insertElement.clearCreatedElementField"
            }]
            },
            "actionMessages": {
                "success": [ {
                        "message": "oneelementInsertSuccessfulMessage",
                        "condition": "ctx.aceActiveContext.context.insertLevelInput.selectedElements.length===1"
                    },
                    {
                        "message": "multipleelementsInsertSuccessfulMessage",
                        "condition": "ctx.aceActiveContext.context.insertLevelInput.selectedElements.length>1"
                    }
                ],
                "failure": [ {
                    "message": "insertLevelFailure"
                }]
            },
            "deps": "js/insertElementService"
        },
        "newElementCreatedPostProcessing": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [ {
                        "name": "insertElement.insertObjectToSelectedElement"
                    }
                ]
            }
        },
        "clearCreatedElementField": {
            "actionType": "JSFunction",
            "method": "clearCreatedElementField",
            "inputData": {
                "data": "{{data}}"
            },
            "events": {
                "success": [ {
                    "name": "insertElement.closePanel"
                } ]
            },
            "deps": "js/addElementService"
        },
        "closePanel": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [ {
                    "name": "complete",
                    "eventData": {
                        "source": "toolAndInfoPanel"
                    }
                } ]
            }
        },
        "autoAssignProperty": {
            "actionType": "JSFunction",
            "method": "autoAssignProperty",
            "inputData": {
                "prop": "{{data.eventData.prop}}",
                "operationType": "CREATE",
                "pattern": "{{data.eventData.newPattern}}",
                "selectedObj": "{{}}",
                "hasRevRule": "{{data.hasRevRuleAttached}}"
            },

            "deps": "js/autoAssignService"
        },
        "elementsInserted":{
            "actionType": "JSFunction",
            "method": "elementsInserted",
            "inputData": {
                "data": "{{data}}"
            },
            "events": {
                "success": [ {
                    "name": "addElement.elementsAdded",
                    "eventData": {
                        "updatedParentElement":"{{data.oldParentElement}}",
                        "addElementResponse": "{{data.addElementResponseForOldParent}}",
                        "viewToReact": "{{ctx.aceActiveContext.key}}"
                    }
                },
                {
                    "name": "addElement.elementsAdded",
                    "eventData": {
                        "updatedParentElement":"{{data.newParent}}",
                        "addElementResponse": "{{data.addElementResponseForNewParent}}",
                        "viewToReact": "{{ctx.aceActiveContext.key}}"
                    }
                }
             ]
            },
            "deps": "js/insertElementService"
        }
    },

    "dataProviders": {

    },


    "onEvent":
    [
        {
            "eventId": "insertElement.insertObjectToSelectedElement",
            "action": "insertElements"
        },
        {
            "eventId": "addObject.objectcreated",
            "action": "newElementCreatedPostProcessing"
        },
        {
            "eventId": "addObject.addOprfailed",
            "action": "closePanel"
        },
        {
            "eventId": "insertElement.clearCreatedElementField",
            "action": "clearCreatedElementField"
        },
        {
            "eventId": "insertElement.closePanel",
            "action": "closePanel"
        },
        {
            "eventId": "insertElement.updateSelectionInPWA",
            "cacheEventData": true,
            "action": "updateSelectionInPWA"
        },
        {
            "eventId": "insertLevel.elementsInserted",
            "cacheEventData": true,
            "action": "elementsInserted"
        },
        {
            "eventId": "awPattern.newPatternSelected",
            "cacheEventData": true,
            "action": "autoAssignProperty"
        },
        {
            "eventId": "appCtx.register",
            "condition": "conditions.isSelectionChangeEventTriggered",
            "action": "closePanel"
        }
    ],

    "functions":
    {
        "getParentElementToInsertLevel": {
            "functionName": "getParentElementToInsertLevel",
            "parameters": [
                "{{data}}"
            ]
        }
    },

    "conditions":
    {
        "isNewTabInsertButtonVisible": {
            "expression": "data.selectedTab.panelId==='newTabPageSub' && data.creationType"
        },
        "isSingleElementSelected": {
            "expression": "(data.selectedTab.panelId==='paletteTabPageSub' && (ctx.getClipboardProvider.selectedObjects.length === 1 || ctx.getFavoriteProvider.selectedObjects.length ===1 || ctx.getRecentObjsProvider.selectedObjects.length === 1 )) || (data.selectedTab.panelId==='resultsTabPageSub' && data.dataProviders.performSearch.selectedObjects.length === 1 )"
        },
        "isSelectionChangeEventTriggered": {
            "expression": "name == 'selected'"
        }
    },

    "messages":
    {
        "oneelementInsertSuccessfulMessage": {
            "messageType": "INFO",
            "messageText": "{{i18n.elementInsertSuccessful}}",
            "messageTextParams": [
                "{{data.insertElementResponse.newParent.props.object_string.uiValues[0]}}",
                "{{ctx.aceActiveContext.context.insertLevelInput.selectedElements[0].props.object_string.dbValues[0]}}"
            ]
        },
        "multipleelementsInsertSuccessfulMessage": {
            "messageType": "INFO",
            "messageText": "{{i18n.multipleelementsInsertSuccessful}}",
            "messageTextParams": [
                "{{data.insertElementResponse.newParent.props.object_string.uiValues[0]}}"
            ]
        },
        "insertLevelFailure": {
            "messageType": "ERROR",
            "messageText": "{{data.insertElementResponse.ServiceData.partialErrors[0].errorValues[0].message}}"
        }
    },

    "i18n":
    {
        "insertNewLevelBtn":
        [
            "OccurrenceManagementConstants"
        ],
        "elementInsertSuccessful":
        [
            "OccurrenceManagementMessages"
        ],
        "multipleelementsInsertSuccessful":
        [
            "OccurrenceManagementMessages"
        ]
    }
}
