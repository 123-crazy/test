{
    "schemaVersion": "1.0.0",
    "imports": [

        "js/aw-panel-header.directive",
        "js/aw-command-panel-section.directive",
        "js/aw-command-sub-panel.directive",
        "js/aw-panel-section.directive",
        "js/aw-default-cell.directive",
        "js/aw-form.directive",
        "js/aw-form-validator.directive",
        "js/aw-numeric.directive",
        "js/aw-add.directive",
        "js/aw-panel-footer.directive",
        "js/aw-button.directive",
        "js/aw-i18n.directive",
        "js/visible-when.directive",
        "js/exist-when.directive"
    ],
    "data": {
        "visibleTabs": "new,palette,search",
        "isIncludeSubTypes": "false",
        "numberOfElements": {
            "displayName": "{{i18n.numberOfElements}}",
            "type": "INTEGER",
            "isRequired": "true",
            "isEditable": "true",
            "dbValue": 1,
            "dispValue": 1,
            "labelPosition": "PROPERTY_LABEL_AT_SIDE"
        }
    },
    "actions": {

        "processAddElementInput": {
            "actionType": "JSFunction",
            "method": "processAddElementInput",
            "inputData": {},
            "outputData": {},
            "deps": "js/addElementService"
        },
        "resetNumberOfElementsToDefault": {
            "actionType": "JSFunction",
            "method": "resetNumberOfElements",
            "inputData": {
                "data": "{{data.numberOfElements}}"
            },
            "outputData": {},
            "deps": "js/addElementService"
        },

        "getInfoForAddElementAction": {
            "actionType": "TcSoaService",
            "serviceName": "Internal-ActiveWorkspaceBom-2019-12-OccurrenceManagement",
            "method": "getInfoForAddElement3",
            "inputData": {
                "getInfoForElementIn":{
                    "fetchAllowedOccRevTypes": false,
                    "parentElement": "{{ctx.aceActiveContext.context.addElement.parentToLoadAllowedTypes}}"
                }
            },
            "outputData": {
                "allowedTypeInfo": "{{function:extractAllowedTypesInfoFromResponse}}"

            },
            "deps": "js/addElementService"
        },

        "getInfoForAddElementAction2": {
            "actionType": "TcSoaService",
            "serviceName": "Internal-ActiveWorkspaceBom-2021-06-OccurrenceManagement",
            "method": "getInfoForAddElement4",
            "inputData": {
                "getInfoForElementIn": {
                    "fetchAllowedOccRevTypes": false,
                    "parentElement": "{{ctx.aceActiveContext.context.addElement.parentToLoadAllowedTypes}}"
                }
            },
            "outputData": {
                "allowedTypeInfo": "{{function:extractAllowedTypesInfoFromResponse}}",
                "ctx.aceActiveContext.context.addElement.AddOccurrencePropertiesOnCreate": "result.requestPref[Awb0AddOccurrencePropertiesOnCreate].[0]"
            },
            "deps": "js/addElementService"
        },

        "createAndAddElement": {
            "actionType": "Event",

            "method": "Event",
            "inputData": {
                "events": [ {
                    "name": "addObject.startCreateObject"
                } ]
            }
        },

        "addElements": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [ {
                    "name": "addObject.addElements"
                } ]
            }
        },

        "resetCreateInputPropertiesToDefault": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [ {
                    "name": "awb0Element.resetCreateInputPropertiesToDefault",
                    "excludeLocalDataCtx": true
                } ]
            }
        },

        "newElementCreatedPostProcessing": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [ {
                        "name": "addElement.addObjectToSelectedElement"
                    },
                    {
                        "name": "awPanel.loadNextValues",
                        "condition": "data.unpinnedToForm.dbValue"
                    }
                ]
            }
        },

        "addElementsWithoutCreateInput": {
            "actionType": "TcSoaService",
            "serviceName": "Internal-ActiveWorkspaceBom-2019-06-OccurrenceManagement",
            "method": "addObject2",
            "inputData": {
                "input": {
                    "objectsToBeAdded": "{{function:getElementsToAdd}}",
                    "parentElement": "{{ctx.aceActiveContext.context.addElement.parent}}",
                    "siblingElement": "{{ctx.aceActiveContext.context.addElement.siblingElement}}",
                    "inputCtxt": {
                        "productContext": "{{ctx.aceActiveContext.context.productContextInfo}}"
                    },
                    "sortCriteria": {
                        "propertyName": "{{ctx.aceActiveContext.context.sortCriteria[0].fieldName}}",
                        "sortingOrder": "{{ctx.aceActiveContext.context.sortCriteria[0].sortDirection}}"
                    },
                    "addObjectIntent": "{{ctx.aceActiveContext.context.addElement.addObjectIntent}}",
                    "fetchPagedOccurrences": "{{ctx.aceActiveContext.context.addElement.fetchPagedOccurrences}}",
                    "requestPref": {
                        "displayMode": [ "{{function:getDisplayMode}}" ]
                    },
                    "numberOfElements": "{{data.numberOfElements.dbValue}}"
                }
            },
            "outputData": {
                "addElementResponse": "",
                "totalObjectsAdded": "{{function:getTotalNumberOfChildrenAdded}}"
            },
            "events": {
                "success": [ {
                        "name": "addElement.clearCreatedElementField"
                    },
                    {
                        "name": "acePwa.reset",
                        "condition": "_internal.conditionStates.areNewElementsAdded && _internal.conditionStates.isPanelPinned && !_internal.conditionStates.isTreeMode"
                    },
                    {
                        "name": "addElement.elementsAdded",
                        "eventData": {
                            "objectsToSelect": "{{function:getNewlyAddedChildElements}}",
                            "addElementResponse": "{{data.addElementResponse}}",
                            "viewToReact": "{{ctx.aceActiveContext.key}}"
                        },
                        "condition": "_internal.conditionStates.areNewElementsAdded"
                    },
                    {
                        "name": "aceElementsSelectionUpdatedEvent",
                        "eventData": {
                            "objectsToSelect": "{{function:getNewlyAddedChildElements}}"
                        },
                        "condition": "_internal.conditionStates.areNewElementsAdded && !_internal.conditionStates.isPanelPinned && _internal.conditionStates.isTreeMode"
                    },
                    {
                        "name": "aceElementsSelectionUpdatedEvent",
                        "eventData": {
                            "objectsToSelect": "{{function:getNewlyAddedChildElements}}"
                        },
                        "condition": "_internal.conditionStates.areNewElementsAdded && !_internal.conditionStates.isPanelPinned && _internal.conditionStates.addingToOpenedElement && !_internal.conditionStates.isTreeMode"
                    },
                    {
                        "name": "acePwa.reset",
                        "condition": "_internal.conditionStates.areNewElementsAdded && !_internal.conditionStates.isPanelPinned && _internal.conditionStates.addingToOpenedElement && !_internal.conditionStates.isTreeMode && !_internal.conditionStates.onlyOneElementAdded"
                    },
                    {
                        "name": "addElement.updateSelectionInPWA",
                        "eventData": {
                            "objectToSelect": "{{ctx.aceActiveContext.context.addElement.parent.uid}}"
                        },
                        "condition": "_internal.conditionStates.areNewElementsAdded && ctx.aceActiveContext.context.addElementInput.parentElement.uid !== ctx.aceActiveContext.context.addElement.parent.uid"
                    },
                    {
                        "name": "addElement.elementsAddedToSelectedElementFromPWA",
                        "condition": "_internal.conditionStates.areNewElementsAdded && !_internal.conditionStates.isPanelPinned && _internal.conditionStates.addingToSelectedElementFromPWA"
                    }
                ],
                "failure": [ {
                        "name": "addElement.clearCreatedElementField"
                    },
                    {
                        "name": "acePwa.reset",
                        "condition": "_internal.conditionStates.areNewElementsAdded && _internal.conditionStates.isPanelPinned && !_internal.conditionStates.isTreeMode"
                    },
                    {
                        "name": "addElement.elementsAdded",
                        "eventData": {
                            "objectsToSelect": "{{function:getNewlyAddedChildElements}}",
                            "addElementResponse": "{{data.addElementResponse}}",
                            "viewToReact": "{{ctx.aceActiveContext.key}}"
                        },
                        "condition": "_internal.conditionStates.areNewElementsAdded && _internal.conditionStates.isTreeMode"
                    },
                    {
                        "name": "aceElementsSelectionUpdatedEvent",
                        "eventData": {
                            "objectsToSelect": "{{function:getNewlyAddedChildElements}}"
                        },
                        "condition": "_internal.conditionStates.areNewElementsAdded && !_internal.conditionStates.isPanelPinned && _internal.conditionStates.isTreeMode"
                    },
                    {
                        "name": "aceElementsSelectionUpdatedEvent",
                        "eventData": {
                            "objectsToSelect": "{{function:getNewlyAddedChildElements}}"
                        },
                        "condition": "_internal.conditionStates.areNewElementsAdded && !_internal.conditionStates.isPanelPinned && _internal.conditionStates.addingToOpenedElement && !_internal.conditionStates.isTreeMode"
                    },
                    {
                        "name": "acePwa.reset",
                        "condition": "_internal.conditionStates.areNewElementsAdded && !_internal.conditionStates.isPanelPinned && _internal.conditionStates.addingToOpenedElement && !_internal.conditionStates.isTreeMode && !_internal.conditionStates.onlyOneElementAdded"
                    },
                    {
                        "name": "addElement.updateSelectionInPWA",
                        "eventData": {
                            "objectToSelect": "{{ctx.aceActiveContext.context.addElement.parent.uid}}"
                        },
                        "condition": "_internal.conditionStates.areNewElementsAdded && ctx.aceActiveContext.context.addElementInput.parentElement.uid !== ctx.aceActiveContext.context.addElement.parent.uid"
                    },
                    {
                        "name": "addElement.elementsAddedToSelectedElementFromPWA",
                        "condition": "_internal.conditionStates.areNewElementsAdded && !_internal.conditionStates.isPanelPinned && _internal.conditionStates.addingToSelectedElementFromPWA"
                    }
                ]
            },
            "actionMessages": {
                "success": [ {
                        "message": "newElementAddSuccessfulMessage",
                        "condition": "data.createdObject && data.createdObject.props"
                    },
                    {
                        "message": "oneCopiedElementAddSuccessfulMessage",
                        "condition": "data.createdObject && data.createdObject.length === 1"
                    },
                    {
                        "message": "existingElementAddSuccessfulMessage",
                        "condition": "data.sourceObjects.length == 1 && !data.createdObject"
                    },
                    {
                        "message": "elementsPartiallyAddedMessage",
                        "condition": "data.sourceObjects.length > 1"
                    }
                ],
                "failure": [ {
                    "message": "elementsPartiallyAddedMessage",
                    "condition": "_internal.conditionStates.areNewElementsAdded"
                },{
                    "message": "addElementsFailureMessage",
                    "condition": "_internal.conditionStates.areNewElementsAdded === false"
                } ]
            },
            "deps": "js/addElementService"
        },

        "addElementsWithCreateInput": {
            "actionType": "TcSoaService",
            "serviceName": "Internal-ActiveWorkspaceBom-2021-06-OccurrenceManagement",
            "method": "addObject3",
            "inputData": {
                "input": {
                    "objectsToBeAdded": "{{function:getElementsToAdd}}",
                    "parentElement": "{{ctx.aceActiveContext.context.addElement.parent}}",
                    "siblingElement": "{{ctx.aceActiveContext.context.addElement.siblingElement}}",
                    "inputCtxt": {
                        "productContext": "{{ctx.aceActiveContext.context.productContextInfo}}"
                    },
                    "sortCriteria": {
                        "propertyName": "{{ctx.aceActiveContext.context.sortCriteria[0].fieldName}}",
                        "sortingOrder": "{{ctx.aceActiveContext.context.sortCriteria[0].sortDirection}}"
                    },
                    "addObjectIntent": "{{ctx.aceActiveContext.context.addElement.addObjectIntent}}",
                    "fetchPagedOccurrences": "{{ctx.aceActiveContext.context.addElement.fetchPagedOccurrences}}",
                    "requestPref": {
                        "displayMode": [ "{{function:getDisplayMode}}" ],
                        "structExpanded": [ "{{function:getExpandedValue}}" ]
                    },
                    "numberOfElements": "{{ctx.aceActiveContext.context.addElement.numberOfElements.dbValue}}",
                    "createInputs": [
                        "{{ctx.aceActiveContext.context.addElement.elementCreateInput[0].createData}}"
                    ]
                }
            },
            "outputData": {
                "addElementResponse": "",
                "totalObjectsAdded": "{{function:getTotalNumberOfChildrenAdded}}"
            },
            "events": {
                "success": [ {
                        "name": "addElement.clearCreatedElementField"
                    },
                    {
                        "name": "acePwa.reset",
                        "condition": "_internal.conditionStates.areNewElementsAdded && _internal.conditionStates.isPanelPinned && !_internal.conditionStates.isTreeMode"
                    },
                    {
                        "name": "addElement.elementsAdded",
                        "eventData": {
                            "objectsToSelect": "{{function:getNewlyAddedChildElements}}",
                            "addElementResponse": "{{data.addElementResponse}}",
                            "viewToReact": "{{ctx.aceActiveContext.key}}"
                        },
                        "condition": "_internal.conditionStates.areNewElementsAdded"
                    },
                    {
                        "name": "aceElementsSelectionUpdatedEvent",
                        "eventData": {
                            "objectsToSelect": "{{function:getNewlyAddedChildElements}}"
                        },
                        "condition": "_internal.conditionStates.areNewElementsAdded && !_internal.conditionStates.isPanelPinned && _internal.conditionStates.isTreeMode"
                    },
                    {
                        "name": "aceElementsSelectionUpdatedEvent",
                        "eventData": {
                            "objectsToSelect": "{{function:getNewlyAddedChildElements}}"
                        },
                        "condition": "_internal.conditionStates.areNewElementsAdded && !_internal.conditionStates.isPanelPinned && _internal.conditionStates.addingToOpenedElement && !_internal.conditionStates.isTreeMode"
                    },
                    {
                        "name": "acePwa.reset",
                        "condition": "_internal.conditionStates.areNewElementsAdded && !_internal.conditionStates.isPanelPinned && _internal.conditionStates.addingToOpenedElement && !_internal.conditionStates.isTreeMode && !_internal.conditionStates.onlyOneElementAdded"
                    },
                    {
                        "name": "addElement.updateSelectionInPWA",
                        "eventData": {
                            "objectToSelect": "{{ctx.aceActiveContext.context.addElement.parent.uid}}"
                        },
                        "condition": "_internal.conditionStates.areNewElementsAdded && ctx.aceActiveContext.context.addElementInput.parentElement.uid !== ctx.aceActiveContext.context.addElement.parent.uid"
                    },
                    {
                        "name": "addElement.elementsAddedToSelectedElementFromPWA",
                        "condition": "_internal.conditionStates.areNewElementsAdded && !_internal.conditionStates.isPanelPinned && _internal.conditionStates.addingToSelectedElementFromPWA"
                    }
                ],
                "failure": [ {
                        "name": "addElement.clearCreatedElementField"
                    },
                    {
                        "name": "acePwa.reset",
                        "condition": "_internal.conditionStates.areNewElementsAdded && _internal.conditionStates.isPanelPinned && !_internal.conditionStates.isTreeMode"
                    },
                    {
                        "name": "addElement.elementsAdded",
                        "eventData": {
                            "objectsToSelect": "{{function:getNewlyAddedChildElements}}",
                            "addElementResponse": "{{data.addElementResponse}}",
                            "viewToReact": "{{ctx.aceActiveContext.key}}"
                        },
                        "condition": "_internal.conditionStates.areNewElementsAdded && _internal.conditionStates.isTreeMode"
                    },
                    {
                        "name": "aceElementsSelectionUpdatedEvent",
                        "eventData": {
                            "objectsToSelect": "{{function:getNewlyAddedChildElements}}"
                        },
                        "condition": "_internal.conditionStates.areNewElementsAdded && !_internal.conditionStates.isPanelPinned && _internal.conditionStates.isTreeMode"
                    },
                    {
                        "name": "aceElementsSelectionUpdatedEvent",
                        "eventData": {
                            "objectsToSelect": "{{function:getNewlyAddedChildElements}}"
                        },
                        "condition": "_internal.conditionStates.areNewElementsAdded && !_internal.conditionStates.isPanelPinned && _internal.conditionStates.addingToOpenedElement && !_internal.conditionStates.isTreeMode"
                    },
                    {
                        "name": "acePwa.reset",
                        "condition": "_internal.conditionStates.areNewElementsAdded && !_internal.conditionStates.isPanelPinned && _internal.conditionStates.addingToOpenedElement && !_internal.conditionStates.isTreeMode && !_internal.conditionStates.onlyOneElementAdded"
                    },
                    {
                        "name": "addElement.updateSelectionInPWA",
                        "eventData": {
                            "objectToSelect": "{{ctx.aceActiveContext.context.addElement.parent.uid}}"
                        },
                        "condition": "_internal.conditionStates.areNewElementsAdded && ctx.aceActiveContext.context.addElementInput.parentElement.uid !== ctx.aceActiveContext.context.addElement.parent.uid"
                    },
                    {
                        "name": "addElement.elementsAddedToSelectedElementFromPWA",
                        "condition": "_internal.conditionStates.areNewElementsAdded && !_internal.conditionStates.isPanelPinned && _internal.conditionStates.addingToSelectedElementFromPWA"
                    }
                ]
            },
            "actionMessages": {
                "success": [ {
                        "message": "newElementAddSuccessfulMessage",
                        "condition": "data.createdObject && data.createdObject.props"
                    },
                    {
                        "message": "oneCopiedElementAddSuccessfulMessage",
                        "condition": "data.createdObject && data.createdObject.length === 1"
                    },
                    {
                        "message": "existingElementAddSuccessfulMessage",
                        "condition": "data.sourceObjects.length == 1 && !data.createdObject"
                    },
                    {
                        "message": "elementsPartiallyAddedMessage",
                        "condition": "data.sourceObjects.length > 1"
                    }
                ],
                "failure": [ {
                    "message": "elementsPartiallyAddedMessage",
                    "condition": "_internal.conditionStates.areNewElementsAdded"
                }, {
                    "message": "addElementsFailureMessage",
                    "condition": "_internal.conditionStates.areNewElementsAdded === false"
                } ]
            },
            "deps": "js/addElementService"
        },

        "getPropertiesToCopy": {
            "actionType": "TcSoaService",
            "serviceName": "Core-2011-06-OperationDescriptor",
            "method": "getSaveAsDesc",
            "inputData": {
                "targetObjects": "{{function:setUnderlyingObjectsOfSourceObjectsAndReturn}}"
            },
            "outputData": {
                "deepCopyInfoMap": "deepCopyInfoMap"
            },
            "events": {
                "success": [ {
                    "name": "addElement.gotPropertiesThatCouldCopy"
                } ]
            },
            "deps": "js/addElementService"
        },

        "createSaveAsInput": {
            "actionType": "JSFunction",
            "method": "createSaveAsInput",
            "inputData": {
                "recentTypeName": "{{data}}"
            },
            "outputData": {},
            "deps": "js/addElementService"
        },

        "saveAs": {
            "actionType": "TcSoaService",
            "serviceName": "Core-2012-09-DataManagement",
            "method": "saveAsObjectAndRelate",
            "inputData": {
                "relateInfo": "{{data.saveAs.relateInfo}}",
                "saveAsInput": "{{data.saveAs.saveAsInput}}"
            },
            "outputData": {
                "createdObject": "{{function:getCreatedObjects}}"
            },
            "events": {
                "success": [ {
                    "name": "addElement.addObjectToSelectedElement"
                } ],
                "failure": [ {
                    "name": "addElement.addObjectToSelectedElement",
                    "condition": "data.createdObject"
                } ]
            },
            "deps": "js/addObjectUtils"
        },

        "closePanel": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [ {
                    "name": "complete",
                    "condition": "!data._internal.isDestroyed && (!conditions.isPanelPinned || conditions.isPwaSelectionChanged)",
                    "eventData": {
                        "source": "toolAndInfoPanel"
                    }
                } ]
            }
        },

        "clearCreatedElementField": {
            "actionType": "JSFunction",
            "method": "clearCreatedElementField",
            "inputData": {
                "data": "{{data}}"
            },
            "events": {
                "success": [ {
                    "name": "addElement.closePanel"
                } ]
            },
            "deps": "js/addElementService"
        },

        "updateSelectionInPWA": {
            "actionType": "JSFunction",
            "method": "updateContextState",
            "inputData": {
                "contextKey": "{{ctx.aceActiveContext.key}}",
                "newState": {
                    "c_uid": "{{data.eventData.objectToSelect}}"
                },
                "mergeWithCurrentState": true
            },
            "deps": "js/contextStateMgmtService"
        },
        "autoAssignProperty": {
            "actionType": "JSFunction",
            "method": "autoAssignProperty",
            "inputData": {
                "prop": "{{data.eventData.prop}}",
                "operationType": "CREATE",
                "pattern": "{{data.eventData.newPattern}}",
                "selectedObj": "{{}}",
                "hasRevRule": "{{data.hasRevRuleAttached}}"
            },

            "deps": "js/autoAssignService"
        },

        "addElementProperties": {
            "actionType": "Event",
            "method": "Event",
            "inputData": {
                "events": [ {
                    "name": "awb0Element.addElementProperties",
                    "excludeLocalDataCtx": true
                    }
                ]
            }
        },

        "updateSelectedTabOnCtx": {
            "actionType": "JSFunction",
            "method": "updatePartialCtx",
            "inputData": {
                "path": "aceActiveContext.context.addElement.selectedTab",
                "value": "{{data.selectedTab}}"
            },
            "deps": "js/appCtxService"
        }
    },

    "messages": {
        "oneCopiedElementAddSuccessfulMessage": {
            "messageType": "INFO",
            "messageText": "{{i18n.elementAddSuccessful}}",
            "messageTextParams": [
                "{{data.createdObject[0].props.object_string.uiValues[0]}}",
                "{{ctx.aceActiveContext.context.addElement.parent.props.object_string.dbValues[0]}}"
            ]
        },

        "newElementAddSuccessfulMessage": {
            "messageType": "INFO",
            "messageText": "{{i18n.elementAddSuccessful}}",
            "messageTextParams": [
                "{{data.createdObject.props.object_string.uiValues[0]}}",
                "{{ctx.aceActiveContext.context.addElement.parent.props.object_string.dbValues[0]}}"
            ]
        },

        "existingElementAddSuccessfulMessage": {
            "messageType": "INFO",
            "messageText": "{{i18n.elementAddSuccessful}}",
            "messageTextParams": [
                "{{data.sourceObjects[0].props.object_string.uiValues[0]}}",
                "{{ctx.aceActiveContext.context.addElement.parent.props.object_string.dbValues[0]}}"
            ]
        },

        "elementsPartiallyAddedMessage": {
            "messageType": "INFO",
            "messageText": "{{i18n.multipleElementAddSuccessful}}",
            "messageTextParams": [
                "{{data.totalObjectsAdded}}",
                "{{ctx.aceActiveContext.context.addElement.parent.props.object_string.dbValues[0]}}"
            ]
        },
        "addElementsFailureMessage":{
            "messageType": "ERROR",
            "messageText": "{{errorCode}}"
        }
    },
    "onEvent": [{
            "eventId": "setCreateInputContextSuccess",
            "action": "addElementsWithCreateInput"

        },
        {
            "eventId": "addElement.addObjectToSelectedElement",
            "action": "addElementProperties",
            "condition": "conditions.isAddOccurrencePropertiesOnCreateSupported"
        },
        {
            "eventId": "addElement.addObjectToSelectedElement",
            "action": "addElementsWithoutCreateInput",
            "condition": "conditions.isNotAddOccurrencePropertiesOnCreateSupported"
        },
        {
            "eventId": "addObject.addElements",
            "action": "addElementProperties",
            "condition": "conditions.isAddOccurrencePropertiesOnCreateSupported"
        },
        {
            "eventId": "addObject.addElements",
            "action": "addElementsWithoutCreateInput",
            "condition": "conditions.isNotAddOccurrencePropertiesOnCreateSupported"
        },
        {
            "eventId": "awTab.selected",
            "action": "resetNumberOfElementsToDefault"
        },

        {
            "eventId": "awTab.selected",
            "action": "updateSelectedTabOnCtx"
        },

        {
            "eventId": "getRecentObjsProvider.selectionChangeEvent",
            "action": "resetNumberOfElementsToDefault"
        },
        {
            "eventId": "performSearch.selectionChangeEvent",
            "action": "resetNumberOfElementsToDefault"
        },

        {
            "eventId": "getClipboardProvider.selectionChangeEvent",
            "action": "resetNumberOfElementsToDefault"
        },

        {
            "eventId": "getFavoriteProvider.selectionChangeEvent",
            "action": "resetNumberOfElementsToDefault"
        },
        {
            "eventId": "addObject.objectcreated",
            "action": "newElementCreatedPostProcessing"
        },
        {
            "eventId": "getRecentObjsProvider.selectionChangeEvent",
            "action": "resetCreateInputPropertiesToDefault"
        },
        {
            "eventId": "performSearch.selectionChangeEvent",
            "action": "resetCreateInputPropertiesToDefault"
        },

        {
            "eventId": "getClipboardProvider.selectionChangeEvent",
            "action": "resetCreateInputPropertiesToDefault"
        },
        {
            "eventId": "getFavoriteProvider.selectionChangeEvent",
            "action": "resetCreateInputPropertiesToDefault"
        },
        {
            "eventId": "awPanel.reveal",
            "criteria": {
                "panelId": "AceAddPanel"
            },
            "action": "processAddElementInput"
        },
        {
            "eventId": "appCtx.register",
            "condition": "conditions.isSelectionChangeEventTriggered",
            "action": "closePanel"
        },
        {
            "eventId": "ace.activateWindow",
            "action": "closePanel"
        },
        {
            "eventId": "addElement.gotPropertiesThatCouldCopy",
            "action": "createSaveAsInput"
        },
        {
            "eventId": "addElement.saveAsInputCreated",
            "action": "saveAs"
        },
        {
            "eventId": "addElement.getInfoForAddElementAction",
            "action": "getInfoForAddElementAction",
            "condition": "!ctx.aceActiveContext.context.supportedFeatures.Awb0ElementPropetiesOnCreateFeature"
        },
        {
            "eventId": "addElement.getInfoForAddElementAction",
            "action": "getInfoForAddElementAction2",
            "condition": "ctx.aceActiveContext.context.supportedFeatures.Awb0ElementPropetiesOnCreateFeature"
        },
        {
            "eventId": "addElement.closePanel",
            "action": "closePanel"
        },
        {
            "eventId": "addElement.updateSelectionInPWA",
            "cacheEventData": true,
            "action": "updateSelectionInPWA"
        },
        {
            "eventId": "addElement.clearCreatedElementField",
            "action": "clearCreatedElementField"
        },
        {
            "eventId": "awPattern.newPatternSelected",
            "cacheEventData": true,
            "action": "autoAssignProperty"
        }
    ],
    "conditions": {
        "addingToSelectedElementFromPWA": {
            "expression": "ctx.aceActiveContext.context.openedElement.uid !== ctx.aceActiveContext.context.addElement.parent.uid"
        },
        "addingToOpenedElement": {
            "expression": "ctx.aceActiveContext.context.openedElement.uid === ctx.aceActiveContext.context.addElement.parent.uid"
        },
        "areNewElementsAdded": {
            "expression": "data.totalObjectsAdded>0"
        },
        "onlyOneElementAdded": {
            "expression": "data.addElementResponse.selectedNewElementInfo.newElements.length === 1"
        },
        "isPwaSelectionChanged": {
            "expression": "ctx.aceActiveContext.context.addElement.previousSelectionUid !== ctx.selected.uid"
        },
        "isPanelPinned": {
            "expression": "data.pinnedToForm.dbValue === false"
        },
        "isSelectionChangeEventTriggered": {
            "expression": "name == 'selected'"
        },
        "isNewTabAddButtonVisible": {
            "expression": "data.selectedTab.panelId==='newTabPageSub' && data.creationType"
        },
        "isPaletteTabAddButtonVisible": {
            "expression": "data.selectedTab.panelId==='paletteTabPageSub' && (ctx.getClipboardProvider.selectedObjects.length > 0 || ctx.getFavoriteProvider.selectedObjects.length > 0  || ctx.getRecentObjsProvider.selectedObjects.length > 0)"
        },
        "isSearchTabAddButtonVisible": {
            "expression": "data.selectedTab.panelId==='resultsTabPageSub' && data.dataProviders.performSearch.selectedObjects.length>0"
        },
        "isParentElementIsOpenedElementToAdd": {
            "expression": "ctx.aceActiveContext.context.openedElement.uid == ctx.selected.uid"
        },
        "isTreeMode": {
            "expression": "ctx.ViewModeContext && (ctx.ViewModeContext.ViewModeContext === 'TreeView' || ctx.ViewModeContext.ViewModeContext === 'TreeSummaryView')"
        },
        "areNumberOfElementsValid": {
            "expression": "data.numberOfElements.dbValue>=1 && data.numberOfElements.dbValue<=10000"
        },
        "isSingleElementSelected": {
            "expression": "(data.selectedTab.panelId==='paletteTabPageSub' && (ctx.getClipboardProvider.selectedObjects.length === 1 || ctx.getFavoriteProvider.selectedObjects.length ===1 || ctx.getRecentObjsProvider.selectedObjects.length === 1 )) || (data.selectedTab.panelId==='resultsTabPageSub' && data.dataProviders.performSearch.selectedObjects.length === 1 )"
        },
        "areMultipleElementSelected": {
            "expression": "(data.selectedTab.panelId==='paletteTabPageSub' && (ctx.getClipboardProvider.selectedObjects.length > 1 || ctx.getFavoriteProvider.selectedObjects.length > 1 || ctx.getRecentObjsProvider.selectedObjects.length > 1 )) || (data.selectedTab.panelId==='resultsTabPageSub' && data.dataProviders.performSearch.selectedObjects.length > 1 )"
        },
        "isAddOccurrencePropertiesOnCreateSupported": {
            "expression": "(ctx.aceActiveContext.context.addElement.AddOccurrencePropertiesOnCreate && ctx.aceActiveContext.context.addElement.AddOccurrencePropertiesOnCreate === 'true' && ctx.aceActiveContext.context.addElement.Awb0ElementCreateSubView && ctx.aceActiveContext.context.addElement.Awb0ElementCreateSubView === true && !ctx.aceActiveContext.context.isMarkupEnabled)"
        },
        "isNotAddOccurrencePropertiesOnCreateSupported": {
            "expression": "!(ctx.aceActiveContext.context.addElement.AddOccurrencePropertiesOnCreate && ctx.aceActiveContext.context.addElement.AddOccurrencePropertiesOnCreate === 'true' && ctx.aceActiveContext.context.addElement.Awb0ElementCreateSubView && ctx.aceActiveContext.context.addElement.Awb0ElementCreateSubView === true && !ctx.aceActiveContext.context.isMarkupEnabled)"
        }
    },
    "functions": {
        "getCreateInput": {
            "functionName": "getCreateInput",
            "parameters": [
                "{{data}}"
            ]
        },
        "setUnderlyingObjectsOfSourceObjectsAndReturn": {
            "functionName": "setUnderlyingObjectsOfSourceObjectsAndReturn",
            "parameters": [
                "{{data}}"
            ]
        },
        "getElementsToAdd": {
            "functionName": "getElementsToAdd",
            "parameters": [
                "{{data}}"
            ]
        },
        "getNewlyAddedChildElements": {
            "functionName": "getNewlyAddedChildElements",
            "parameters": [ "{{data}}" ]
        },
        "extractAllowedTypesInfoFromResponse": {
            "functionName": "extractAllowedTypesInfoFromResponse",
            "parameters": []
        },
        "getTotalNumberOfChildrenAdded": {
            "functionName": "getTotalNumberOfChildrenAdded",
            "parameters": [ "{{data}}" ]
        },
        "getDisplayMode": {
            "functionName": "getDisplayMode",
            "parameters": [
                "", "{{ctx}}", "", "(ctx.ViewModeContext.ViewModeContext === 'TreeView' || ctx.ViewModeContext.ViewModeContext === 'TreeSummaryView') && 'Tree' || 'List'"
            ]
        },
        "getExpandedValue": {
            "functionName": "getExpandedValue",
            "parameters": []
        }
    },
    "i18n": {
        "addElementBtn": [
            "OccurrenceManagementConstants"
        ],
        "addElementCopyButtonText": [
            "OccurrenceManagementConstants"
        ],
        "createAndAddElementBtn": [
            "OccurrenceManagementConstants"
        ],
        "elementAddSuccessful": [
            "OccurrenceManagementMessages"
        ],
        "toTitle": [
            "OccurrenceManagementConstants"
        ],
        "multipleElementAddSuccessful": [
            "OccurrenceManagementMessages"
        ],
        "numberOfElements": [
            "OccurrenceManagementConstants"
        ],
        "addElementProperties": [
            "OccurrenceManagementConstants"
        ]

    }
}
