// Copyright (c) 2020 Siemens

/**
 * This module provides access to service APIs that helps to display context menu.
 *
 * @module js/contextMenuService
 * @requires app
 */
import app from 'app';
import ngModule from 'angular';
import $ from 'jquery';
import 'js/command.service';
import 'js/appCtxService';

let exports = {};

var _pendingFlushQueue = [];

export let cacheContextMenu = function( scope, elem ) {
    // flush pending queue
    for( var i = _pendingFlushQueue.length - 1; i >= 0; i-- ) {
        if( _pendingFlushQueue[ i ].scope !== scope ) {
            exports.closePanel( _pendingFlushQueue[ i ].scope, _pendingFlushQueue[ i ].elem );
            _pendingFlushQueue.pop();
        }
    }
    _pendingFlushQueue.push( {
        scope: scope,
        elem: elem
    } );
};

export let closePanel = function( _scope, elem ) {
    _scope.$broadcast( 'awPopupWidget.close', {
        popupUpLevelElement: elem
    } );
};

/**
 * utility function to get the scope reference (if set) on the controller under the parent element.
 *
 * @param {Event} closestTo - the event object generated by hammer
 * @param {Event} event - the event object generated by hammer
 * @param {Object} scope - scope of the element clicked
 */
export let showContextMenu = function( closestTo, event ) {
    if( $( event.target ).closest( closestTo ).length ) {
        var currParentElWithPopup = null;

        /*  are we in table */
        currParentElWithPopup = ngModule.element( $( event.target ).closest( 'aw-table' ) );
        if( currParentElWithPopup.length === 0 ) {
            /* are we in list */
            currParentElWithPopup = ngModule.element( $( event.target ).closest( 'div.aw-widgets-modelObjectList' ) );
        }

        if( currParentElWithPopup.length > 0 ) {
            /* get the popup element from the table or list */
            var popupUpEl = currParentElWithPopup.find( 'aw-popup-panel' );
            currParentElWithPopup.scope().$broadcast( 'awPopupWidget.open', {
                    popupUpLevelElement: popupUpEl
                },
                currParentElWithPopup,
                event,
                'contextMenu'
            );

            exports.cacheContextMenu( ngModule.element( popupUpEl ).scope(), popupUpEl );
        }
    }
};

exports = {
    cacheContextMenu,
    closePanel,
    showContextMenu
};
export default exports;
/**
 * Provides access to the compareService
 *
 * @class compareService
 * @memberOf NgServices
 */
app.factory( 'contextMenuService', () => exports );
