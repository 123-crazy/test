// Copyright (c) 2020 Siemens

/**
 * @module js/aw-chip-list.directive
 */
import * as app from 'app';
import _ from 'lodash';
import $ from 'jquery';
import eventBus from 'js/eventBus';
import 'js/uwPropertyService';
import 'js/selectionHelper';
import 'js/aw-chip.directive';

/**
 * Definition for the 'aw-chip-list' directive used to display chip list.
 * prop: optional. The view model property to hold the chip list selection status. Only required for the selectable chip list.
 * buttonType: optional. The chip button style, default to 'base' type.
 * action: optional. The declarative action to perform. It's only applicable for clickable chip.
 * uiIconAction: optional. The declarative action to perform when the UI icon is clicked. It only applicable for BUTTON chip type.
 *
 *
 * @example <aw-chip-list dataprovider="data.staticChipDataProvider">
 * @example <aw-chip-list dataprovider="data.staticChipDataProvider" button-type='accent-high-contrast'>
 * @example <aw-chip-list dataprovider="data.selectionChipDataProvider" prop='selectionChip'>
 * @example <aw-chip-list dataprovider="data.choiceChipDataProvider" prop='data.choiceChip' action='toggleAction'>
 * @example <aw-chip-list dataprovider="data.buttonChipDataProvider" action='clickAction' ui-icon-action='removeChipAction'>
 *
 * @member aw-chip-list
 * @memberof NgAttributeDirectives
 */
app.directive( 'awChipList', function() {
    return {
        restrict: 'E',
        scope: {
            dataprovider: '=', //chip object array
            prop: '=?', //view model property for selectable chip list
            buttonType: '@?',
            action: '@?',
            uiIconAction: '@?'
        },
        templateUrl: app.getBaseUrlPath() + '/html/aw-chip-list.directive.html',
        controller: [ '$scope', 'uwPropertyService', 'selectionHelper', function( $scope, propertySvc, selectionHelper ) {
            $scope.initChipList = function() {
                $scope.dataprovider.initialize( $scope ).then( function() {
                    $scope.chips = $scope.dataprovider.viewModelCollection.getLoadedViewModelObjects();

                    // set initial chip selection
                    var selected = _.filter( $scope.chips, { selected: true } );
                    if( selected.length > 0 ) {
                        $scope.dataprovider.selectionModel.setSelection( selected );
                    }
                } );
            };

            $scope.initChipList();

            var selectionModel = $scope.dataprovider.selectionModel;
            if( selectionModel ) {
                if( !selectionModel.isSelectionEnabled() ) {
                    $scope.disableSelection = true;
                }

                // directly enable multiple selection mode, avoid press Ctrl + click to multi select
                if( selectionModel.mode === 'multiple' ) {
                    selectionModel.setMultiSelectionEnabled( true );
                }
            }

            $scope.handleChipElementClick = function( event ) {
                var targetChip = _getClickedObject( event );
                var selectionModel = $scope.dataprovider.selectionModel;

                // No selected object if user has clicked in empty area and not in cell
                if( targetChip ) {
                    selectionHelper.handleSelectionEvent( [ targetChip ], selectionModel, event, $scope.dataprovider );
                }

                //update prop dbValue
                if( $scope.prop ) {
                    var selectedChips = $scope.dataprovider.getSelectedObjects();
                    var chipInternalNames = selectedChips.map( chip => { return chip.labelInternalName; } );
                    var chipDisplayNames = selectedChips.map( chip => { return chip.labelDisplayName; } );
                    propertySvc.updateModelData( $scope.prop, chipInternalNames, chipDisplayNames );
                }

                $scope.$evalAsync();
            };

            /**
             *  Gives clicked chip object
             *
             * @param {Event} event - the event object generated by hammer
             * @return {Object} selectedObj
             */
            function _getClickedObject( event ) {
                var scope = $( event.target ).closest( '.aw-widgets-chip' ).scope();
                if( !scope || !scope.chip ) {
                    return undefined;
                }

                return scope.chip;
            }
        } ],
        link: function( $scope, $element ) {
            $element.click( function( event ) {
                if( !$scope.disableSelection ) {
                    $scope.handleChipElementClick( event );
                }
            } );

            var resetEvent = eventBus.subscribe( $scope.dataprovider.name + '.reset', function() {
                $scope.initChipList();
            } );

            $scope.$on( '$destroy', function() {
                eventBus.unsubscribe( resetEvent );
                resetEvent = null;
            } );
        },
        replace: true
    };
} );
