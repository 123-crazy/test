{
    "CONTROL_LOGGER_Constructor": "Control- Inside PLMVisWeb Control constructor.",
    "CONTROL_LOGGER_Constructor2": "Control- Unexpected children found in host element!",
    "CONTROL_LOGGER_License": "Control- Failed to acquire license!",
    "CONTROL_LOGGER_setSize": "Control- setSize API- Updating the size of the control.",
    "CONTROL_LOGGER_getSize": "Control- getSize API- Returning the size of the control.",
    "VIEWER_LOGGER_Constructor": "PLMVis JavaScript toolkit Viewer constructor.",
    "VIEWER_LOGGER_startRenderLoop": "startRenderLoop API: starting render loop.",
    "VIEWER_CONSOLE_startRenderLoop": "Viewer must be initialized ( viewer.init(); ) before starting the render loop.",
    "VIEWER_LOGGER_stopRenderLoop": "stopRenderLoop API: render loop stopped.",
    "VIEWER_LOGGER_getSelectedPointsInfo": "getSelectedPointsInfo API : getting selected vertices.",
    "VIEWER_LOGGER_finest_getSelectedPointsInfo": "getSelectedPointsInfo API : selected vertices : ",
    "VIEWER_LOGGER_setMouseNavigationEnabled": "setMouseNavigationEnabled API : setting mouse navigation to :",
    "VIEWER_LOGGER_warn_setMouseNavigationEnabled": "setMouseNavigationEnabled API : camera controls are not defined.",
    "VIEWER_LOGGER_getMouseNavigationEnabled": "getMouseNavigationEnabled API : returning mouse navigation status.",
    "VIEWER_LOGGER_zoomToCursor": "zoomToCursor API : setting zoom to cursor to :",
    "VIEWER_LOGGER_isZoomingToCursor": "isZoomingToCursor API : returning zom to cursor status.",
    "VIEWER_LOGGER_rotateAroundTheCameraTarget": "zoomToCursor API : camera controls are not defined.",
    "VIEWER_LOGGER_warn_rotateAroundTheCameraTarget": "rotateAroundTheCameraTarget API : camera controls are not defined.",
    "VIEWER_LOGGER_clearScene": "clearScene API :clearing the scene.",
    "VIEWER_LOGGER_fine_clearScene": "clearScene API : clearing the existing  extensions.",
    "VIEWER_LOGGER_finest_clearScene": "clearScene API : clearing the extension:",
    "VIEWER_LOGGER_finest2_clearScene": "clearScene API : This extension will not be cleared :",
    "VIEWER_LOGGER_info2_clearScene": "clearScene API : scene cleared.",
    "VIEWER_LOGGER_getCameraMode": "getCameraMode API: returning camera mode.",
    "VIEWER_LOGGER_setCameraMode": "setCameraMode API: updating camera mode to:",
    "VIEWER_LOGGER_setMouseNavigationMode": "setMouseNavigationMode API: updating mouse navigation mode to:",
    "VIEWER_LOGGER_getMouseNavigationMode": "getMouseNavigationMode API: returning mouse navigation mode.",
    "VIEWER_LOGGER_setMouseNavigationModeSensitivity": "setMouseNavigationModeSensitivity API: updating mouse navigation mode speed to:",
    "VIEWER_LOGGER_fitAll": "fitAll API: moving camera to fit all the geomtery into view.",
    "VIEWER_LOGGER_info2_fitAll": "fitAll API: moving camera to fit all the visible geometry into view.",
    "VIEWER_LOGGER_warn_fitAll": "fitAll API: model bounding box is empty.",
    "VIEWER_LOGGER_getWebGLContext": "getWebGLContext API: returning the wenGL context.",
    "VIEWER_LOGGER_setPickingEnabled": "setPickingEnabled API: updating the picking enable state.",
    "VIEWER_LOGGER_getPickingEnabled": "getPickingEnabled API: returning if the picking is enabled or not",
    "VIEWER_LOGGER_registerMouseOverEvent": "registerMouseOverEvent API: registering the mouse over event.",
    "VIEWER_LOGGER_unregisterMouseOverEvent": "unregisterMouseOverEvent API: unregistering the mouse over event.",
    "VIEWER_LOGGER_registerCameraModeChangeEvent": "registerCameraModeChangeEvent API: registering the camera mode change vent.",
    "VIEWER_LOGGER_unregisterCameraModeChangeEvent": "unregisterCameraModeChangeEvent API: unregistering the camera mode change event.",
    "VIEWER_LOGGER_registerProgressEvent": "registerProgressEvent API: registering the progress event.",
    "VIEWER_LOGGER_unregisterProgressEvent": "unregisterProgressEvent API: unregistering the progress event.",
    "VIEWER_LOGGER_open": "open API: opening the model.",
    "VIEWER_LOGGER_importModel": "importModel API: importing the model.",
    "VIEWER_LOGGER_openWithObject": "openWithObject API: Opening a model with json object :",
    "VIEWER_LOGGER_finest_openWithObject": "openWithObject API: open successfully loaded with rootID:",
    "VIEWER_LOGGER_importModelWithObject": "importModelWithObject API: Importing  model with json object :",
    "VIEWER_LOGGER_setVisibilityByPsId": "setVisibilityByPsId API: Updating visibility of the object(s) with psid or array of psids :",
    "VIEWER_LOGGER_finest_setVisibilityByPsId": "setVisibilityByPsId API: Updated the visibility.",
    "VIEWER_LOGGER_finest2_setVisibilityByPsId": "setVisibilityByPsId API: Updating visibility of the children object with psid:",
    "VIEWER_LOGGER_warn_setVisibilityByPsId": "setVisibilityByPsId API: Object with the given psid is null or undefined.",
    "VIEWER_LOGGER_setEdgesVisibilityByPsId": "setEdgesVisibilityByPsId API: Updating visibility of the edges with psid :",
    "VIEWER_LOGGER_setRenderMode": "setRenderMode API: updating rendering mode of current model",
    "VIEWER_LOGGER_finest_getRenderMode": "getRenderMode API: get rendering mode of current model",
    "VIEWER_LOGGER_finest_setEdgesVisibilityByPsId": "setEdgesVisibilityByPsId API:Loading edges and vertices for object :",
    "VIEWER_LOGGER_finest_getEdgesVisibilityByPsId": "getEdgesVisibilityByPsId API: returning visibility of the edges with psid :",
    "VIEWER_LOGGER_finest_warn_getEdgesVisibilityByPsId": "getEdgesVisibilityByPsId API: object is undefined or null",
    "VIEWER_LOGGER_finest_getEdgeGeometryByPsId": "getEdgeGeometryByPsId API: returning geometry of the edges with psid :",
    "VIEWER_LOGGER_finest_warn_getEdgeGeometryByPsId": "getEdgeGeometryByPsId API: object is undefined or null",
    "VIEWER_LOGGER_setPointsVisibilityByPsId": "setPointsVisibilityByPsId API: returning visibility of the vertices with psid :",
    "VIEWER_LOGGER_finest_setPointsVisibilityByPsId": "setPointsVisibilityByPsId API:Loading edges and vertices for object :",
    "VIEWER_LOGGER_getPointsVisibilityByPsId": "getPointsVisibilityByPsId API: returning visibility of the edges with psid :",
    "VIEWER_LOGGER_warn_getPointsVisibilityByPsId": "getPointsVisibilityByPsId API: object is undefined or null.",
    "VIEWER_LOGGER_getVisibilityStateByPsId": "getVisibilityStateByPsId API: returning visibility state of a node with psId:",
    "VIEWER_LOGGER_warn_getVisibilityStateByPsId": "getVisibilityStateByPsId API: object is undefined or null.",
    "VIEWER_LOGGER_getPointsByPsId": "getPointsByPsId API: returning positions of vertices with psId:",
    "VIEWER_LOGGER_getPointByPsId": "getPointByPsId API: returning position of vertex with psId:",
    "VIEWER_LOGGER_getNameByPsId": "getNameByPsId API: returning the name of the object with psid: :",
    "VIEWER_LOGGER_warn_getNameByPsId": "getNameByPsId API: object is undefined or null.",
    "VIEWER_LOGGER_rotateAboutSelectedPoint": "rotateAboutSelectedPoint API: updating the flag to rotate about selected point to the value :",
    "VIEWER_LOGGER_isRotatingAboutSelectedPoint": "isRotatingAboutSelectedPoint API: Returning whether rotation center is updated not not.",
    "VIEWER_LOGGER_draw": "draw API: forcing a render call.",
    "VIEWER_LOGGER_translateByPsId": "translateByPsId API: Applying a translation to the object identified with the specified psid",
    "VIEWER_LOGGER_finest_translateByPsId": "translateByPsId API:object is found with the given psid",
    "VIEWER_LOGGER_rotateByPsId": "rotateByPsId API: Applying a rotation to the object identified with the specified psid.",
    "VIEWER_LOGGER_scaleByPsId": "scaleByPsId API: Applying a scaling transformation to the object identified with the specified psid",
    "VIEWER_LOGGER_finest_scaleByPsId": "scaleByPsId API:object is found with the given psid",
    "VIEWER_LOGGER_setMaterialByPsId": "setMaterialByPsId API: Updating the various material attributes for the object with the specified psid.",
    "VIEWER_LOGGER_resetMaterialByPsId": "resetMaterialByPsId API: Reseting a part/assembly to its original material.",
    "VIEWER_LOGGER_setCameraOrientation": "setCameraOrientation API: setting the camera orientation to: ",
    "VIEWER_LOGGER_finest_setCameraOrientation": "setCameraOrientation API: camera orientation updated successfully.",
    "VIEWER_LOGGER_registerVisibilityChangeEventByPsId": "registerVisibilityChangeEventByPsId API: Registering visibility change event for the object with given psid.",
    "VIEWER_LOGGER_registerVisibilityEvent": "registerVisibilityEvent API: registering the visibility event.",
    "VIEWER_LOGGER_finest_registerVisibilityChangeEventByPsId": "registerVisibilityChangeEventByPsId API:visibility change event for the object with given psid registered successfully.",
    "VIEWER_LOGGER_unregisterVisibilityChangeEventByPsId": "unregisterVisibilityChangeEventByPsId API: Unregistering visibility change event for the object with given psid.",
    "VIEWER_LOGGER_finest_unregisterVisibilityChangeEventByPsId": "unregisterVisibilityChangeEventByPsId API:visibility change event for the object with given psid unregistered successfully.",
    "VIEWER_LOGGER_unregisterVisibilityEvent": "unregisterVisibilityEvent API: unregistering the visibility event.",
    "VIEWER_LOGGER_getProductStructureInfo": "getProductStructureInfo API:Returning the product struction information.",
    "VIEWER_LOGGER_setCameraOrientationInfo": "setCameraOrientationInfo API:Updating camera orientation information.",
    "VIEWER_LOGGER_getCameraOrientationInfo": "getCameraOrientationInfo API:returning camera orientation information.",
    "VIEWER_LOGGER_getCameraInfo": "getCameraInfo API:returning perspective and orthographic camera information.",
    "VIEWER_LOGGER_modelHasPmi": "modelHasPmi API:Checking if the model has pmi data.",
    "VIEWER_LOGGER_modelHasXt": "modelHasXt API:Checking if the model has xt data.",
    "VIEWER_LOGGER_warn_modelHasXt": "modelHasXt API:given model is undefined.",
    "VIEWER_LOGGER_unloadGeometryByPsId": "unloadGeometryByPsId API:unloading geometry of the object with given psid.",
    "VIEWER_LOGGER_loadGeometryByPsId": "loadGeometryByPsId API:loading geometry of the object with given psid.",
    "VIEWER_LOGGER_setDrawWhileLoading": "setDrawWhileLoading API:updating the drawWhileLoading to:",
    "VIEWER_LOGGER_getDrawWhileLoading": "getDrawWhileLoading API:returning the drawWhileLoading flag value.",
    "VIEWER_LOGGER_setAutoDraw": "setAutoDraw API:updating the autoDraw to:",
    "VIEWER_LOGGER_getAutoDraw": "getAutoDraw API:returning the autoDraw flag value.",
    "VIEWER_LOGGER_setDrawPerParts": "setDrawPerParts API:updating the no of pats to be loaded before calling render to :",
    "VIEWER_LOGGER_getDrawPerParts": "getDrawPerParts API:returning the no of parts that will be loaded before calling render.",
    "VIEWER_LOGGER_applyTransformationMatrixByPsId": "applyTransformationMatrixByPsId API:Applyting the given transformation matrix to the object.",
    "VIEWER_LOGGER_setSectionCaps": "setSectionCaps API: Updating the value of the cap flag.",
    "VIEWER_LOGGER_getSectionCaps": "getSectionCaps API:Returning the value of the cap flag.",
    "VIEWER_LOGGER_setDragFlag": "setDragFlag API: Updating the value of the drag flag.",
    "VIEWER_LOGGER_getDragFlag": "getDragFlag API:Returning the value of the drag flag.",
    "VIEWER_LOGGER_setDragAxes": "setDragAxes API: Updating the value of the drag axes to:",
    "VIEWER_LOGGER_finest_setDragAxes": "setDragAxes API: Updated the value of the drag AXes to:",
    "VIEWER_LOGGER_getDragAxes": "getDragAxes API: Returning the value of the drag axes.",
    "VIEWER_LOGGER_setDragSpriteOnly": "setDragSpriteOnly API:Updating the value of the flag which decided whether drag/drop is limited to sprites.",
    "VIEWER_LOGGER_getDragSpriteOnly": "getDragSpriteOnly API:Returning the value of the flag which decided whether drag/drop is limited to sprites.",
    "VIEWER_LOGGER_isRendering": "isRendering API: Returning the render loop running state.",
    "VIEWER_LOGGER_overrideMouseNavigationControls": "overrideMouseNavigationControls API: Overriding the mouse navigation controls with a custom controller.",
    "VIEWER_LOGGER_overrideMouseNavigationInput": "overrideMouseNavigationIput API: Overriding the mouse navigation input with user defined mouse and key events.",
    "VIEWER_LOGGER_overrideMouseNavigationClickInput": "overrideMouseNavigationClickIput API: Overriding the mouse navigation click input with user defined mouse and key events.",
    "VIEWER_LOGGER_setFlipMouseScrollDirection": "setFlipMouseScrollDirection API: factor: ",
    "VIEWER_LOGGER_getFlipMouseScrollDirection": "getFlipMouseScrollDirection API: flip: ",
    "VIEWER_LOGGER_addImageToScene": "addImageToScene API:Adding image to the scene.",
    "VIEWER_LOGGER_getPsIdAtViewCoordinate": "getPsIdAtViewCoordinate API:Returning the psId of the object at the given view coordinates.",
    "VIEWER_LOGGER_finest_getPsIdAtViewCoordinate": "getPsIdAtViewCoordinate API:PsId is:",
    "VIEWER_LOGGER_warn_getPsIdAtViewCoordinate": "getPsIdAtViewCoordinate API:Coordinates are null or undefined.",
    "VIEWER_LOGGER_getFaceNormalAtViewCoordinate": "getFaceNormalAtViewCoordinate API: Returning the face normal of the face at the given view coordinates.",
    "VIEWER_LOGGER_getPartThicknessAtViewCoordinate": "getPartThicknessAtViewCoordinate API: Returning the thickness of the part at the given view coordinates.",
    "VIEWER_LOGGER_finest_getFaceNormalAtViewCoordinate": "getFaceNormalAtViewCoordinate API: Face normal is:",
    "VIEWER_LOGGER_warn_getFaceNormalAtViewCoordinate": "getFaceNormalAtViewCoordinate API: Coordinates are null or undefined, the object is not in the octree, or a face was not located at the coordinates.",
    "VIEWER_LOGGER_getFaceNormalAtModelCoordinate": "getFaceNormalAtModelCoordinate API: Returning the face normal of the face at the given model coordinates.",
    "VIEWER_LOGGER_finest_getFaceNormalAtModelCoordinate": "getFaceNormalAtModelCoordinate API: Face normal is:",
    "VIEWER_LOGGER_warn_getFaceNormalAtModelCoordinate": "getFaceNormalAtModelCoordinate API: Coordinates are null or undefined, the object is not in the octree, or a face was not located at the coordinates.",
    "VIEWER_LOGGER_getFaceNormalByPsId": "getFaceNormalByPsId API: Returning the face normal of the provided face psid.",
    "VIEWER_LOGGER_finest_getFaceNormalByPsId": "getFaceNormalByPsId API: Face normal is:",
    "VIEWER_LOGGER_warn_getFaceNormalByPsId": "getFaceNormalByPsId API: Either the object is not a face or was not found in the scene.",
    "VIEWER_LOGGER_getModelPointAtViewCoordinate": "getModelPointAtViewCoordinate API: Returning the model point at the given view coordinates.",
    "VIEWER_LOGGER_finest_getModelPointAtViewCoordinate": "getModelPointAtViewCoordinate API: Model point is:",
    "VIEWER_LOGGER_warn_getModelPointAtViewCoordinate": "getModelPointAtViewCoordinate API: Coordinates are null or undefined, the object is not in the octree, or a model object was not located at the coordinates.",
    "VIEWER_LOGGER_projectModelPointToViewCoordinate": "projectModelPointToViewCoordinate API: Projecting the model point into view coordinates.",
    "VIEWER_LOGGER_convertParameterToModelPoint": "convertParameterToModelPoint API: Returning the model point corresponding to the shape's parameter.",
    "VIEWER_LOGGER_warn_convertParameterToModelPoint": "convertParameterToModelPoint API: Either no shape was found with the given xtId, the parameter was not 0 or 1 for a face, the parameter was not in the [0-1.0] range for an edge",
    "VIEWER_LOGGER_convertModelPointToParameter": "convertModelPointToParameter API: Returning the shapes parameter if it corresponds to the given model point, otherwise returning null.",
    "VIEWER_LOGGER_warn_convertModelPointToParameter": "convertModelPointToParameter API: Either no shape could be found with the given xtId or the model point does not reside on the shape.",
    "VIEWER_LOGGER_setDefaultMaterialSide": "setDefaultMaterialSide API:Updating default material behavior.",
    "VIEWER_LOGGER_getDefaultMaterialSide": "getDefaultMaterialSide API:Returning default material behavior.",
    "VIEWER_LOGGER_setTransformationMatrixByPsId": "setTransformationMatrixByPsId API:Updating the local transformation matrix of the object.",
    "VIEWER_LOGGER_getTransformationMatrixByPsId": "getTransformationMatrixByPsId API:Returning the local transformation matrix of the object.",
    "VIEWER_LOGGER_warn_getTransformationMatrixByPsId": "getTransformationMatrixByPsId API:object with the given psid is null or undefined",
    "VIEWER_LOGGER_getBoundingBoxCenterByPsId": "getBoundingBoxCenterByPsId API:Returning the center of a part/assembly bounding box.",
    "VIEWER_LOGGER_warn_getBoundingBoxCenterByPsId": "getBoundingBoxCenterByPsId API:object with the given psid is null or undefined",
    "VIEWER_LOGGER_getVisibleModelBoundingBoxCenter": "getVisibleModelBoundingBoxCenter API:Returning the center of visible part/assembly structure bounding box.",
    "VIEWER_LOGGER_warn_getVisibleModelBoundingBoxCenter": "getVisibleModelBoundingBoxCenter API:Bounding box is empty.",
    "VIEWER_LOGGER_finest_getVisibleModelBoundingBoxCenter": "getVisibleModelBoundingBoxCenter API:Bounding box is not empty with center:",
    "VIEWER_LOGGER_getVisibleModelBoundingBoxLength": "getVisibleModelBoundingBoxLength API:Returning the cross length of visible part/assembly structure bounding box.",
    "VIEWER_LOGGER_warn_getVisibleModelBoundingBoxLength": "getVisibleModelBoundingBoxLength API:Bounding box is empty.",
    "VIEWER_LOGGER_finest_getVisibleModelBoundingBoxLength": "getVisibleModelBoundingBoxLength API:Bounding box is not empty with cross length:",
    "VIEWER_LOGGER_getVisibleBoundingBox": "getVisibleBoundingBox API:Returning the bounding box for visible objects in the viewer",
    "VIEWER_LOGGER_updateVisibleBBox": "_updateVisibleBBox:Updating the bounding box for visible objects in the viewer",
    "VIEWER_LOGGER_setCameraOrientationFromPLMXML": "setCameraOrientationFromPLMXML API:Updating the camera orientation according to the given plmxml file.",
    "VIEWER_LOGGER_warn_setCameraOrientationFromPLMXML": "setCameraOrientationFromPLMXML API:Failed to receive XMLHttpRequest data.",
    "VIEWER_LOGGER_warn3_setCameraOrientationFromPLMXML": "setCameraOrientationFromPLMXML API:Failed to retrieve ",
    "VIEWER_LOGGER_finest_setCameraOrientationFromPLMXML": "setCameraOrientationFromPLMXML API: camera orientation has been updated successfully according to the given plmxml file",
    "VIEWER_LOGGER_warn2_setCameraOrientationFromPLMXML": "setCameraOrientationFromPLMXML API:Failed to receive XMLHttpRequest response.",
    "VIEWER_LOGGER_replaceMaterialByPsId": "replaceMaterialByPsId API: Length of color data and width and height don't match (colors.length = width * height * 3)",
    "GENERAL_CONSOLE_warn_FailedRequest": "Failed to receive XMLHttpRequest data!",
    "GENERAL_CONSOLE_warn_FailedResponse": "Failed to receive XMLHttpRequest response!",
    "GENERAL_CONSOLE_err_FailedToRetrieve": "Failed to retrieve.",
    "VIEWER_LOGGER_setCameraToStandardView": "setCameraToStandardView API:Updating the camera orientation according to the given plmxml file.",
    "VIEWER_LOGGER_getTextureTransparencyDefault": "getTextureTransparencyDefault API:checking whether materials with textures will be treated as transparent objects.",
    "VIEWER_LOGGER_setTextureTransparencyDefault": "setTextureTransparencyDefault API:Updating whether materials with textures will be treated as transparent objects.",
    "VIEWER_LOGGER_getObjectTypeByPsId": "getObjectTypeByPsId API:Finding the type of geometry an object refers to.",
    "VIEWER_LOGGER_setFaceWireframeVisibilityByPsId": "setFaceWireframeVisibilityByPsId API:Finding the type of geometry an object refers to.",
    "VIEWER_LOGGER_getFaceWireframeVisibilityByPsId": "getFaceWireframeVisibilityByPsId API:Returning the visibility of the face wire frames for the given PSID.",
    "VIEWER_LOGGER_warn_getFaceWireframeVisibilityByPsId": "getFaceWireframeVisibilityByPsId API:Object is either not defined or null.",
    "VIEWER_LOGGER_finest_autoExplode": "autoExplode API: Model %d% exploded.",
    "VIEWER_LOGGER_setExplodeMode": "setExplodeMode API: Updating the mode of auto-explode.",
    "VIEWER_LOGGER_getExplodeMode": "getExplodeMode API: Returning the current auto-explode mode.",
    "VIEWER_LOGGER_setFPS": "setFPS API: FPS is now set to: ",
    "VIEWER_LOGGER_getFPS": "getFPS API: Current FPS is set at: ",
    "VIEWER_LOGGER_setFPS_warn": "setFPS API: FPS acceptable range is between 1 and 60.",
    "VIEWER_LOGGER_addSGO": "addSGO API: Adding Scene Graph Object to the scene.",
    "VIEWER_LOGGER_removeSGO": "removeSGO API: Removing Scene Graph Object from the scene.",
    "VIEWER_LOGGER_getSGOs": "getSGOs API: Returns all Scene Graph Objects in the scene.",
    "VIEWER_LOGGER_renderOrderSGO": "renderOrderSGO API: Reorders the rendering of a Scene Graph Object in the scene.",
    "VIEWER_LOGGER_setTransparentRenderingFlag": "setTransparentRenderingFlag API: Transparent rendering flag is now: ",
    "VIEWER_LOGGER_getTransparentRenderingFlag": "getTransparentRenderingFlag API: Transparent rendering flag is currently: ",
    "VIEWER_LOGGER_getlocalToWorldByPsId": "getlocalToWorldByPsId API: Converting local values to world coordinates.",
    "VIEWER_LOGGER_getworldToLocalByPsId": "getworldToLocalByPsId API: Converting world values to local coordinates.",
    "VIEWER_LOGGER_setPickOnly": "setPickOnly API: Pick-Only raycasting is now: ",
    "VIEWER_LOGGER_getPickOnly": "getPickOnly API: Pick-Only raycasting is currently: ",
    "VIEWER_LOGGER_setEventPriority": "setEventPriority API: Component, type, priority: ",
    "VIEWER_LOGGER_getEventPriority": "getEventPriority API: Component, type: ",
    "VIEWER_LOGGER_setMouseEasing": "setMouseEasing API: factor: ",
    "VIEWER_LOGGER_err_setMouseEasing": "setMouseEasing API: invalid factor.",
    "VIEWER_LOGGER_getMouseEasing": "getMouseEasing API: factor: ",
    "VIEWER_LOGGER_registerPickingEvent": "registerPickingEvent API: Registering the picking event.",
    "VIEWER_LOGGER_unregisterPickingEvent": "unregisterPickingEvent API: Unregistering the picking event.",
    "VIEWER_LOGGER_registerCameraChangedEvent": "registerCameraChangedEvent API: registering the camera changed event.",
    "VIEWER_LOGGER_unregisterCameraChangedEvent": "unregisterCamerachangedEvent API: unregistering the camera changed event.",
    "VIEWER_LOGGER_setUserCapColor": "setUserCapColor API: Setting the user cap material via the material definition",
    "VIEWER_LOGGER_resetUserCapColor": "resetUserCapColor API: Resetting the user cap material to the default material definition ( diffuse: 0x999999, emissive: 0x0, specular: 0x0, shininess: 1, opacity: 1 )",
    "VIEWER_LOGGER_setUserCapColorEnabled": "setUserCapColorEnabled API: Section cap colors are now using the user-defined section cap material, set via the 'setUserCapColor' API",
    "VIEWER_LOGGER_warn_setUserCapColorEnabled": "setUserCapColorEnabled API: Flag parameter is not a boolean value",
    "VIEWER_LOGGER_getUserCapColorEnabled": "getUserCapColorEnabled API: User-defined section cap material is ",
    "VIEWER_LOGGER_getBodyIdsById": "getBodyIdsById API: returning the body ids owned by or associated with the object with id :",
    "VIEWER_LOGGER_getEdgeIdsById": "getEdgeIdsById API: returning the edge ids owned by or associated with the object with id :",
    "VIEWER_LOGGER_getFaceIdsById": "getFaceIdsById API: returning the face ids owned by or associated with the object with id : ",
    "VIEWER_LOGGER_getPointIdsById": "getPointIdsById API: returning the vertex ids owned by or associated with the object with id :",
    "VIEWER_LOGGER_addBox": "addBox API: ",
    "VIEWER_LOGGER_addSolidBox": "addSolidBox API: ",
    "VIEWER_LOGGER_removeBox": "removeBox API: id: ",
    "VIEWER_LOGGER_addLine": "addLine API: ",
    "VIEWER_LOGGER_removeLine": "removeLine API: id: ",
    "VIEWER_LOGGER_error_updateGeometryByPsId": "updateGeometryByPsId API: bad psId:",
    "VIEWER_LOGGER_fitToBoundingBox": "fitToBoundingBox API: ",
    "VIEWER_LOGGER_cloneByXtIds": "cloning the provided xtIds",
    "VIEWER_LOGGER_getProtoIdByPsId": "Returning ProtoId of given PsId.",
    "VIEWER_LOGGER_no_protoId": "No protoId found for psId: ",
    "VIEWER_LOGGER_isLoaded": "Returning if the node of given PsId is loaded or not.",
    "VIEWER_LOGGER_no_isLoaded": "Given node has no isloaded property psId:",
    "VIEWER_LOGGER_isAssembly": "Returning if the node of given PsId is assembly or not.",
    "VIEWER_LOGGER_no_isAssembly": "given node has no isAssembly property for psId:",
    "VIEWER_LOGGER_registerLoaderEvent": "registerLoaderEvent: Registering loader event",
    "VIEWER_LOGGER_unregisterLoaderEvent": "unregisterLoaderEvent: Unregistering loader event",
    "VIEWER_LOGGER_fireLoaderEvent": "fireLoaderEvent: Firing loader event",
    "PMI_LOGGER_registerVisibilityChangeEventByPsId": "PMI-registerVisibilityChangeEventByPsId API: Registers the given visibility change event on a specific object.",
    "PMI_LOGGER_unregisterVisibilityChangeEventByPsId": "PMI-unregisterVisibilityChangeEventByPsId API: Unregistering the given visibility change event on a specific object.",
    "PMI_LOGGER_registerSelectionChangeEventByPsId": "PMI-registerSelectionChangeEventByPsId API: registering the given selection change event on a specific object.",
    "PMI_LOGGER_unregisterSelectionChangeEventByPsId": "PMI-unregisterSelectionChangeEventByPsId API: unregistering the given selection change event on a specific object.",
    "PMI_LOGGER_loadPmiData": "PMI-loadPmiData API: Loading PMI data from plm_pmi.json.",
    "PMI_LOGGER_finest_loadPmiData": "PMI-loadPmiData API: Pmi data is loaded.",
    "PMI_LOGGER_warn_loadPmiData": "PMI-loadPmiData API: Object with the given psid is either null or not defined.",
    "PMI_CONSOLE_warn_loadPmiData": "Failed to receive XMLHttpRequest data!",
    "PMI_CONSOLE_warn2_loadPmiData": "Failed to receive XMLHttpRequest response!",
    "PMI_CONSOLE_err_loadPmiData": "Failed to retrieve ",
    "PMI_LOGGER_loadPmiDataWithObject": "PMI-loadPmiDataWithObject API: Loading PMI data from the given jaavscript object.",
    "PMI_LOGGER_warn_loadPmiDataWithObject": "PMI-loadPmiDataWithObject API: Object with the given psid is either null or not defined.",
    "PMI_LOGGER_isPmiObject": "PMI-isPmiObject API:Finding if current psid is associated with a pmi object.",
    "PMI_LOGGER_alignCameraToPmi": "PMI-alignCameraToPmi API:Aligning the camera to a specified PMI object.",
    "PMI_LOGGER_setPmiSelectionMaterial": "PMI-setPmiSelectionMaterial API:Updating the selection material for PMI.",
    "PMI_LOGGER_setPmiColorByPsId": "PMI-setPmiColorByPsId API:Updating the color of the object specified.",
    "PMI_LOGGER_finest_setPmiColorByPsId": "PMI-setPmiColorByPsId API:Updated the color of the object specified.",
    "PMI_LOGGER_setPmiMaterial": "PMI-setPmiMaterial API:Updating the material for PMI.",
    "PMI_LOGGER_finest_setPmiMaterial": "PMI-setPmiMaterial API:Updated the material for PMI.",
    "PMI_LOGGER_getPmiStructureInfo": "PMI-getPmiStructureInfo API:Returning the PMI structure information.",
    "PMI_LOGGER_getDesignGroupsStructureInfo": "PMI-getDesignGroupsStructureInfo API:Retrieving Design Groups structure information.",
    "PMI_LOGGER_getModelViewsStructureInfo": "PMI-getModelViewsStructureInfo API:Retrieving Model Views structure information.",
    "PMI_LOGGER_setSelectionByPsId": "PMI-setSelectionByPsId API:Updating the selection of the given object(s) to: ",
    "PMI_LOGGER_finest_setSelectionByPsId": "PMI-setSelectionByPsId API:Updated the selection of the given object(s) to: ",
    "PMI_LOGGER_setDesignGroupActive": "PMI-setDesignGroupActive API:Updating the sdesign group status",
    "PMI_LOGGER_setModelViewActive": "PMI-setModelViewActive API:Updating the model view status.",
    "PMI_LOGGER_getVisibilityStateByPsId": "getVisibilityStateByPsId API: returning visibility state of a PMI object with psId:",
    "PMI_LOGGER_warn_getVisibilityStateByPsId": "getVisibilityStateByPsId API: object is undefined or null.",
    "PMI_CONSOLE_log_setModelViewActive": "Warning: Feature IDs not supported for Model Groups.",
    "PMI_CONSOLE_warn__setObjectSelection": "Encountered unknown object (%d) during selection.",
    "PMI_CONSOLE_warn2__setObjectSelection": "ERROR!\nProcessing PMI ID: %s\nFeature not found: %s",
    "PROPERTIES_LOGGER_loadProperties": "Properties- loadProperties API-Loading the properties of the parts with the psid of the model.",
    "PROPERTIES_LOGGER_warn_loadProperties": "Properties- loadProperties API-Failed to retrieve the path given.",
    "PROPERTIES_LOGGER_getProperties": "Properties- getProperties API-Returning the properties of the parts with the psid of the model.",
    "PROPERTIES_LOGGER_getProperty": "Properties- getProperty API-Returning the property value of the property key.",
    "PROPERTIES_LOGGER_loadAllProperties": "Properties- loadAllProperties API-Loading properties of all the models in the scene.",
    "PROPERTIES_LOGGER_addProperty": "Properties- addProperty API-Dynamically adding a key-value pair to the object properties",
    "PROPERTIES_LOGGER_addProperties": "Properties- addProperties API-Dynamically adding a property object to the object properties",
    "PROPERTIES_LOGGER_removeProperty": "Properties- removeProperty API-Dynamically removing a key-value pair to the object properties",
    "PROPERTIES_LOGGER_removeAllProperties": "Properties- removeAllProperties API-Dynamically removing all object properties associated with psId",
    "WCS_LOGGER_setVisibility": "WCS- setVisibility API-Updating the visibility state for the WCS.",
    "WCS_LOGGER_getVisibility": "WCS- getVisibility API-Finding the visibility state for the WCS.",
    "WCS_LOGGER_setPosition": "WCS- setPosition API-Repositioning the WCS trihedron.",
    "WCS_LOGGER_getPosition": "WCS- getPosition API-Finding the position of the WCS.",
    "WCS_LOGGER_setSize": "WCS- setSize API-Updating the size of the WCS.",
    "WCS_LOGGER_getSize": "WCS- getSize API-Finding the size of the WCS.",
    "WCS_LOGGER_setOnTop": "WCS- setOnTop API- Updating whether the WCS is rendered on top of or behind the scene geometry.",
    "WCS_LOGGER_getOnTop": "WCS- getOnTop API-Finding whether the WCS is rendered on top of or behind the scene geometry.",
    "CULLING_LOGGER_initialize": "Culling- initialize API-Initializing the culling library.",
    "CULLING_LOGGER_warn_initialize": "Culling- initialize API- Error:",
    "CULLING_LOGGER_warn2_initialize": "Culling- initialize API-worker is not defined or null.",
    "CULLING_LOGGER_warn_clear": "Culling- unknown failure to remove all cullable objects",
    "CULLING_LOGGER_warn_isClear": "Culling- unknown failure to query whether or not all of the cullables have been flushed away",
    "CULLING_LOGGER_warn_render": "Culling- unknown failure before a render",
    "CULLING_LOGGER_warn_setCullableObjects": "Culling- unknown failure during setCullableObjects",
    "CULLING_LOGGER_unregisterLayerChangeEvent": "Culling- unregisterLayerChangeEvent API-Unregistering a layer change event for the whole view.",
    "CULLING_LOGGER_registerLayerChangeEvent": "Culling- registerLayerChangeEvent API-Registering a layer change event for the whole view.",
    "CULLING_LOGGER_getCullingLayerByPsId": "Culling- getCullingLayerByPsId API- Finding an object's current layer.",
    "CULLING_LOGGER_warn_getCullingLayerByPsId": "Culling-getCullingLayerByPsId API- object for given psid is not defined.",
    "CULLING_LOGGER_setCullableObjects": "Culling- setCullableObjects API- Setting the list of cullable objects.",
    "CULLING_LOGGER_getCullableObjects": "Culling- getCullableObjects API-retrieivng the identifiers and culling layer of all registered objects.",
    "CULLING_LOGGER_setBatchFrames": "Culling- setBatchFrames API- Setting the frames between processing cull batches.",
    "CULLING_LOGGER_getBatchFrames": "Culling- getBatchFrames API- Returning the frames between processing cull batches.",
    "CULLING_LOGGER_setBatchSize": "Culling- setBatchSize API- Updating the number of cull actions to process per cull batch.",
    "CULLING_LOGGER_getBatchSize": "Culling- getBatchSize API- Returning the number of cull actions to process per cull batch.",
    "CULLING_LOGGER_setBoundary1Size": "Culling- setBoundary1Size API-Updating the screen radius of the object when the first cull action should occur.",
    "CULLING_LOGGER_getBoundary1Size": "Culling- getBoundary1Size API-Returning  the screen radius of the object when the first cull action should occur.",
    "CULLING_LOGGER_setBoundary2Size": "Culling- setBoundary2Size API-Updating  the screen radius of the object when the second cull action should occur.",
    "CULLING_LOGGER_getBoundary2Size": "Culling- getBoundary2Size API-Returning  the screen radius of the object when the second cull action should occur.",
    "CULLING_LOGGER_setBoundarySizes": "Culling- setBoundarySizes API-Updating  the screen radius of the object when the first and second cull action should occur.",
    "CULLING_LOGGER_useDefaultActions": "Culling- useDefaultActions API-Updating whether the culling module should use default culling actions or not.",
    "CULLING_LOGGER_isUsingDefaultActions": "Culling- isUsingDefaultActions API-Finding whether the the culling module is using default culling actions or not.",
    "CULLING_LOGGER_setUseLoadingUnloading": "Culling- setUseLoadingUnloading API-Updating  whether the culling actions include loading/unloading (for use with default actions only).",
    "CULLING_LOGGER_isUsingLoadingUnloading": "Culling- isUsingLoadingUnloading API-Finding whether culling actions include laoding/unloading.",
    "CULLING_LOGGER_setActive": "Culling- setActive API-Updating whether culling occurs or not.",
    "CULLING_LOGGER_isActive": "Culling- isActive API-Finding whether culling occurs or not.",
    "CULLING_LOGGER_setSuspendOnMovement": "Culling- setSuspendOnMovement API-Updating whether culling should still occur while rotating/panning or not.",
    "CULLING_LOGGER_getSuspendOnMovement": "Culling- getSuspendOnMovement API-Finding whether culling should still occur while rotating/panning or not.",
    "CULLING_LOGGER_getSurfaceScanner": "Culling- getSurfaceScanner API-returns the Culling object's Surface Scanner",
    "CULLING_LOGGER_getSizeCuller": "Culling- getSizeCuller API-returns the Culling object's Size Culler",
    "CULLING_LOGGER_updateObjects": "Culling- updateObjects API-Updating all currently cullable objects.",
    "CULLING_LOGGER_addCullableObjectByPsId": "Culling- addCullableObjectByPsId API-Adding the object identified by given psid to the list of cullable objects.",
    "CULLING_LOGGER_removeCullableObjectByPsId": "Culling- removeCullableObjectByPsId API-Removing the object identified by given psid to the list of cullable objects.",
    "CULLING_LOGGER_processCullableObjectByPsId": "Culling- processCullableObjectByPsId API- Processing the current culling layer of the object identified by given psid.",
    "CULLING_LOGGER_processCullableObjects": "Culling- processCullableObjects API- Processing the current culling layer of all cullable objects.",
    "CULLING_LOGGER_isCullableObject": "Culling- isCullableObject API- Returning if the object is in the list of cullable objects.",
    "CULLING_LOGGER_waitUtilNotBusy": "Culling- waitUtilNotBusy API-waiting until the culler is done processing all registered parts.",
    "CULLING_LOGGER_getCullingLayer": "Culling- getCullingLayer API-retrieving the culling layer for a specific registered object.",
    "CULLING_LOGGER_addCullableObjects": "Culling- addCullableObjects API-adding a list of objects to the registered list of cullable objects.",
    "CULLING_LOGGER_removeCullableObjects": "Culling- removeCullableObjects API-removing a list of objects from the registered list of cullable objects.",
    "CULLING_LOGGER_registerLayerChangeBatchEvent": "Culling- registerLayerChangeBatchEvent API-registers for batches of layer change events.",
    "CULLING_LOGGER_unregisterLayerChangeBatchEvent": "Culling- unregisterLayerChangeBatchEvent API-unregisters for batches of layer change events.",
    "CULLING_LOGGER_setLayerBoundaries": "Culling- setLayerBoundaries API-defines the thresholds from when registered objects transition from one layer to another.",
    "CULLING_LOGGER_getLayerBoundaries": "Culling- getLayerBoundaries API-retrieves the thresholds for when registered objects transition from one layer to another.",
    "CULLING_LOGGER_setUseMovingFrameCulling": "Culling- setUseMovingFrameCulling API-defines whether or not moving-frame-culling is to be used.",
    "CULLING_LOGGER_getUseMovingFrameCulling": "Culling- getUseMovingFrameCulling API-retreives whether or not moving-frame-culling is to be used.",
    "CULLING_LOGGER_setFetchCountWhileRotating": "Culling- setFetchCountWhileRotating API-sets how many objects are processed in between frames while rotating.",
    "CULLING_LOGGER_getFetchCountWhileRotating": "Culling- getFetchCountWhileRotating API-gets how many objects are processed in between frames while rotating.",
    "CULLING_LOGGER_setFetchCountWhileIdle": "Culling- setFetchCountWhileIdle API-sets how many objects are processed in batches when the user is not rotating (idle).",
    "CULLING_LOGGER_getFetchCountWhileIdle": "Culling- getFetchCountWhileIdle API-retrieves how many objects are processed in batches when the user is not rotating (idle).",
    "SECTION_LOGGER_registerPlanePositionChangeEvent": "Section- registerPlanePositionChangeEvent API-Registering section plane position change event.",
    "SECTION_LOGGER_finest_registerPlanePositionChangeEvent": "Section- registerPlanePositionChangeEvent API-registering section plane position change event successful.",
    "SECTION_LOGGER_unregisterPlanePositionChangeEvent": "Section- unregisterPlanePositionChangeEvent API-Registering section plane position change event.",
    "SECTION_LOGGER_finest_unregisterPlanePositionChangeEvent": "Section- unregisterPlanePositionChangeEvent API-Unregistering section plane position change event successful.",
    "SECTION_LOGGER_registerPlaneSelectionEvent": "Section- registerPlaneSelectionEvent API-Registering section plane selected event.",
    "SECTION_LOGGER_unregisterPlaneSelectionEvent": "Section- unregisterPlaneSelectionEvent API-Unregistering section plane selected event.",
    "SECTION_LOGGER_setSectionActive": "Section- setSectionActive API-Enabling or disabling sectioning depending on the given parameter",
    "SECTION_LOGGER_getSectionActive": "Section- getSectionActive API-Finding if the sectioning is enabled.",
    "SECTION_LOGGER_clear": "Section- clear API-Clearing all section plane in the scene.",
    "SECTION_LOGGER_addSectionPlane": "Section- addSectionPlane API-Adding a section plane to the scene.",
    "SECTION_LOGGER_finest_addSectionPlane": "Section- addSectionPlane API-Plane id created: ",
    "SECTION_LOGGER_removeSectionPlane": "Section- removeSectionPlane API-Removing a section plane from the scene.",
    "SECTION_LOGGER_setSectionSide": "Section- setSectionSide API- Updating the sectioning side of section plane.",
    "SECTION_LOGGER_getSectionSide": "Section- getSectionSide API-Finding the sectioning side of section plane.",
    "SECTION_LOGGER_warn_getSectionSide": "Section- getSectionSide API-Section plane is not defined.",
    "SECTION_LOGGER_setSectionDirection": "Section- setSectionDirection API-Updating the direction/normal of section plane.",
    "SECTION_LOGGER_getSectionDirection": "Section- getSectionDirection API-Finding the direction/normal of section plane.",
    "SECTION_LOGGER_info2_getSectionDirection": "Section- getSectionDirection API-Section plane is undefined.",
    "SECTION_LOGGER_setSectionPosition": "Section- setSectionPosition API-Updating the position of section plane.",
    "SECTION_LOGGER_getSectionPosition": "Section- getSectionPosition API-Finding the position of section plane.",
    "SECTION_LOGGER_warn_getSectionPosition": "Section- getSectionPosition API-Section plane is undefined.",
    "SECTION_LOGGER_warn_isNotValidObject": "Section- object  is not valid.",
    "SECTION_LOGGER_setSelectionById": "Section- setSelectionById API-Updating the selection state of a section plane.",
    "SECTION_LOGGER_getSelectionById": "Section- getSelectionById API-Finding the selection state of a section plane.",
    "SECTION_LOGGER_finest_getSelectionById": "Section- getSelectionById API-Selection sate of the plane found.",
    "SECTION_LOGGER_warn_getSelectionById": "Section- getSelectionById API-Section plane is not defined.",
    "SECTION_LOGGER_setSelectionAll": "Section- setSelectionAll API-Updating the selection state for all section planes.",
    "SECTION_LOGGER_noCycle": "Section- path without cycle found. A section cap may be missing for",
    "SELECTION_CONSOLE_warn__setObjectSelection": "Encountered unknown object (%s) during selection.",
    "SELECTION_LOGGER_setAreaSelect": "setAreaSelect API: Area selection state is updated to: ",
    "SELECTION_LOGGER_getAreaSelect": "getAreaSelect API: Area selection state is currently: ",
    "SELECTION_LOGGER_setSelectionMaterial": "setSelectionMaterial API:Updating the selection material to given values.",
    "SELECTION_LOGGER_setHighlightingMaterial": "setHighlightingMaterial API:Updating the highlight material to given values.",
    "SELECTION_LOGGER_setPickingMode": "setPickingMode API: Updating picking mode.",
    "SELECTION_LOGGER_finest_setPickingMode": "setPickingMode API: Picking mode is updated to :",
    "SELECTION_LOGGER_getPickingMode": "getPickingMode API: returning the picking mode.",
    "SELECTION_LOGGER_setSelectionToggleMode": "setSelectionToggleMode API: Selection toggle mode is updated to :",
    "SELECTION_LOGGER_getSelectionToggleMode": "getSelectionToggleMode API: returning the selection toggle mode.",
    "SELECTION_LOGGER_selectNone": "selectNone API: clearing the selection in the scene.",
    "SELECTION_LOGGER_getSelectedParts": "getSelectedParts API : getting selected parts.",
    "SELECTION_LOGGER_finest_getSelectedParts": "getSelectedParts API : selected part with psid : ",
    "SELECTION_LOGGER_getSelectedBodies": "getSelectedBodies API : getting selected bodies.",
    "SELECTION_LOGGER_finest_getSelectedBodies": "getSelectedBodies API : selected body with psid : ",
    "SELECTION_LOGGER_getSelectedFaces": "getSelectedFaces API : getting selected faces.",
    "SELECTION_LOGGER_finest_getSelectedFaces": "getSelectedFaces API : selected face with psid : ",
    "SELECTION_LOGGER_getSelectedEdges": "getSelectedEdges API : getting selected edges.",
    "SELECTION_LOGGER_finest_getSelectedEdges": "getSelectedEdges API : selected edge with psid : ",
    "SELECTION_LOGGER_getSelectedPointsInfo": "getSelectedPointsInfo API : getting selected vertices.",
    "SELECTION_LOGGER_finest_getSelectedPointsInfo": "getSelectedPointsInfo API : selected vertices : ",
    "SELECTION_LOGGER_setSelectionByPsId": "setSelectionByPsId API: updating selection of the object(s) with psid(s):",
    "SELECTION_LOGGER_setSelectionByPsIds": "setSelectionByPsIds API: updating selection of the objects with the array of psids.",
    "SELECTION_LOGGER_getSelectionByPsId": "getSelectionByPsId API: get selection information of the object with psid:",
    "SELECTION_LOGGER_registerSelectionEvent": "registerSelectionEvent API: registering the selection event.",
    "SELECTION_LOGGER_unregisterSelectionEvent": "unregisterSelectionEvent API: unregistering the selection event.",
    "SELECTION_LOGGER_registerSelectionChangeEventByPsId": "registerSelectionChangeEventByPsId API:registering selection change event for the object with given psid",
    "SELECTION_LOGGER_finest_registerSelectionChangeEventByPsId": "registerSelectionChangeEventByPsId API:selection change event for the object with given psid registered successfully.",
    "SELECTION_LOGGER_unregisterSelectionChangeEventByPsId": "unregisterSelectionChangeEventByPsId API: Unregistering selection change event for the object with given psid.",
    "SELECTION_LOGGER_finest_unregisterSelectionChangeEventByPsId": "unregisterSelectionChangeEventByPsId API:Selection change event for the object with given psid unregistered successfully.",
    "SELECTION_LOGGER_setPickOnly": "setPickOnly API: Pick-Only raycasting is now: ",
    "SELECTION_LOGGER_getPickOnly": "getPickOnly API: Pick-Only raycasting is currently: ",
    "SELECTION_LOGGER_registerPickingEvent": "registerPickingEvent API: Registering the picking event.",
    "SELECTION_LOGGER_unregisterPickingEvent": "unregisterPickingEvent API: Unregistering the picking event.",
    "SELECTION_LOGGER_setPartialAreaSelect": "setPartialAreaSelect API: Partial area select flag set to ",
    "SELECTION_LOGGER_getPartialAreaSelect": "getPartialAreaSelect API: Partial area select flag is ",
    "SELECTION_LOGGER_findObjectsInArea": "findObjectsInArea API: Returning all objects within the specified area.",
    "SCENE_LOGGER_nullEdgeWarn": "Scene.setEdges- Some edges may be missing. Null edge data found in ",
    "SCENE_LOGGER_insufficientVertices": "Scene.addSectionCaps- Insufficient vertices for section cap triangulation for ",
    "SCENE_LOGGER_badParams": "No bodies/faces/edges found in the scene to clone based on the given parameters",
    "SCENE_LOGGER_invalidId": "No object found in the scene with xtId: ",
    "SCENE_LOGGER_warn_processGeometry": "Need to give the geometry spec per body. Backwards-Compatibility is deprecated and will be removed after 1.7.1 release",
    "SCENEGRAPH_LOGGER_threeErr": "Raycaster: Unsupported camera type.",
    "SCENEGRAPH_LOGGER_threeWarn": "Raycaster.intersectObjects: objects is not an Array.",
    "PART_LOGGER_warn_isLoaded": "Setting the `isLoaded` property externally has been depricated in 1.7.1. Please remove any assignment of `isLoaded`.",
    "SESSION_LOGGER_save": "Session- save API.  Start to save session",
    "SESSION_LOGGER_load": "Session- load API.  Start to load session",
    "SHAPES_LOGGER_addBox": "addBox API: ",
    "SHAPES_LOGGER_addSolidBox": "addSolidBox API: ",
    "SHAPES_LOGGER_err_addBox": "addBox API: invalid parameters.",
    "SHAPES_LOGGER_err_addSolidBox": "addSolidBox API: invalid parameters.",
    "SHAPES_LOGGER_addLine": "addLine API: ",
    "SHAPES_LOGGER_err_addLine": "addLine API: invalid parameters.",
    "SHAPES_LOGGER_addPlane": "addPlane API: ",
    "SHAPES_LOGGER_err_addPlane": "addPlane API: invalid parameters.",
    "SHAPES_LOGGER_removeShape": "removeshape API: id: ",
    "SHAPES_LOGGER_setVisibilityById": "setVisibilityById API: updating visibility of the shape with id: ",
    "SHAPES_LOGGER_getVisibilityById": "getVisibilityById API: returning  visibility of the shape with id: ",
    "SHAPES_LOGGER_clearShapes": "clearShapes API: id: ",
    "SNAPSHOT_LOGGER_setSnapshotEnabled": "Snapshot- setSnapshotEnabled API-Enabling or disabling snapshot creation depending on the argument.",
    "SNAPSHOT_LOGGER_getSnapshotEnabled": "Snapshot- getSnapshotEnabled API-Retrieving the current snapshot-enabled state.",
    "SNAPSHOT_LOGGER_createSnapshotPNG": "Snapshot- createSnapshotPNG API-Creating a snapshot based on the current scenegraph state.",
    "SNAPSHOT_LOGGER_createSnapshotSVG": "Snapshot- createSnapshotSVG API-Creating a snapshot based on the current scenegraph state.",
    "SNAPSHOT_LOGGER_print": "Snapshot- print API-Printing the current contents of the viewer.",
    "SNAPSHOT_LOGGER_warn_print": "Snapshot- print API-Snapshot is disabled.",
    "MEASUREMENT_LOGGER_registerMeasurementEvent": "Measurement- registerMeasurementEvent API-Registering measurement event for Measurement Event notifications.",
    "MEASUREMENT_LOGGER_unregisterMeasurementEvent": "Measurement- unregisterMeasurementEvent API-Removing the given callback from Measurement Event notifications.",
    "MEASUREMENT_LOGGER_measure": "Measurement- measure API-Performing measurement operation given a specified measurement parameters.",
    "MEASUREMENT_LOGGER_measurePointDist": "Measurement- measurePointDistance API-Performing point to point measurement operation given a specified measurement parameters.",
    "XTBODLOADER_CONSOLE_warn_loadFromBinary": "Failed to load XT geometry - Binary data undefined.",
    "THREEEXTENSIONS_CONSOLE_err_updateBuffer": "THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.",
    "THREEEXTENSIONS_CONSOLE_err_WebGLRenderer": "PLMVisWeb.WebGLRenderer:",
    "THREEEXTENSIONS_CONSOLE_err_setupVertexAttributes": "PLMVisWeb.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.",
    "THREEEXTENSIONS_CONSOLE_err_render": "PLMVisWeb.WebGLRenderer.render: camera is not an instance of THREE.Camera.",
    "THREEEXTENSIONS_CONSOLE_err_uploadTexture": "Float Depth Texture only supported in WebGL2.0",
    "THREEEXTENSIONS_CONSOLE_err_setupDepthTexture": "Depth Texture with cube render targets is not supported!",
    "THREEEXTENSIONS_CONSOLE_err2_setupDepthTexture": "renderTarget.depthTexture must be an instance of THREE.DepthTexture.",
    "THREEEXTENSIONS_CONSOLE_err_depthTexture": "target.depthTexture not supported in Cube render targets.",
    "THREEEXTENSIONS_CONSOLE_err_readRenderTargetPixels": "PLMVisWeb.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.",
    "THREEEXTENSIONS_CONSOLE_err2_readRenderTargetPixels": "PLMVisWeb.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.",
    "THREEEXTENSIONS_CONSOLE_err3_readRenderTargetPixels": "PLMVisWeb.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.",
    "THREEEXTENSIONS_CONSOLE_err4_readRenderTargetPixels": "PLMVisWeb.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.",
    "MARKUP_LOGGER_enableMarkup": "Markup- enableMarkup : ",
    "MARKUP_LOGGER_setMarkupMode": "Markup- setMarkupMode : ",
    "MARKUP_LOGGER_showMarkupViewByFile": "Markup- showMarkupViewByFile : ",
    "MARKUP_LOGGER_downloadMarkupView": "Markup- downloadMarkupView : ",
    "MARKUP_LOGGER_showMarkupViewByData": "Markup- showMarkupViewByData : ",
    "MARKUP_LOGGER_getMarkupViewData": "Markup- getMarkupViewData : ",
    "MARKUP_LOGGER_deleteSelected": "Markup- deleteSelected.",
    "MARKUP_LOGGER_setMarkupProperty": "Markup- setMarkupProperty : ",
    "MARKUP_LOGGER_createLine": "Markup- createLine.",
    "MARKUP_LOGGER_createFreehand": "Markup- createFreehand.",
    "MARKUP_LOGGER_createEllipse": "Markup- createEllipse.",
    "MARKUP_LOGGER_createRect": "Markup- createRect.",
    "MARKUP_LOGGER_createText": "Markup- createText.",
    "MARKUP_LOGGER_getMarkupType": "Markup- getMarkupType: ",
    "MARKUP_LOGGER_selectMarkup": "Markup- selectMarkup: ",
    "MARKUP_LOGGER_getSelectedMarkups": "Markup- getSelectedMarkups: ",
    "MARKUP_LOGGER_deleteMarkup": "Markup- deleteMarkup: ",
    "MARKUP_LOGGER_setPropertyOnMarkup": "Markup- setPropertyOnMarkup: ",
    "MARKUP_LOGGER_getPropertyOnMarkup": "Markup- getPropertyOnMarkup: ",
    "MARKUP_LOGGER_getMarkupViewImage": "Markup- getMarkupViewImage.",
    "MARKUP_LOGGER_getMarkupViewImageExt": "Markup- getMarkupViewImageExt.",
    "MARKUP_LOGGER_showMarkupLayerByFile": "Markup- showMarkupLayerByFile : ",
    "MARKUP_LOGGER_downloadMarkupLayer": "Markup- downloadMarkupLayer : ",
    "MARKUP_LOGGER_showMarkupLayerByData": "Markup- showMarkupLayerByData : ",
    "MARKUP_LOGGER_getMarkupLayerData": "Markup- getMarkupLayerData : ",
    "MARKUP_LOGGER_newLayer": "Markup- newLayer: ",
    "MARKUP_LOGGER_deleteLayer": "Markup- deleteLayer: ",
    "MARKUP_LOGGER_getNumberOfLayers": "Markup- getNumberOfLayers: ",
    "MARKUP_LOGGER_getLayers": "Markup- getLayers: ",
    "MARKUP_LOGGER_setActiveLayer": "Markup- setActiveLayer: ",
    "MARKUP_LOGGER_getActiveLayer": "Markup- getActiveLayer: ",
    "MARKUP_LOGGER_getMarkupsOnLayer": "Markup- getMarkupsOnLayer: ",
    "MARKUP_LOGGER_setLayerVisibility": "Markup- setLayerVisibility: ",
    "MARKUP_LOGGER_getLayerVisibility": "Markup- getLayerVisibility: ",
    "MARKUP_LOGGER_invalidInputArg": "Markup- invalid input argument.",
    "MARKUP_LOGGER_openErrorSVG": "Markup - failed to open SVG file.",
    "MARKUP_LOGGER_loadErrorSprite": "Markup -failed to load Sprite.",
    "MARKUP_LOGGER_contentError": "Markup- expecting a HTMLElement or string value.",
    "MARKUP_LOGGER_finest_createAnchoredHTML": "Markup-createAnchoredHTML API- Returning the markup id :",
    "MARKUP_LOGGER_setHTMLHandlerOn": "Markup- setHTMLHandlerOn API- Turning on select and drag functions to anchored html",
    "MARKUP_LOGGER_deleteAllMarkups": "Markup- deleteAllMarkups API- Removing all markups.",
    "MARKUP_LOGGER_createAnchoredHTML": "Markup- createAnchoredHTML API- Creating a generic markup that is outside of the scene.",
    "MARKUP_LOGGER_bringToFront": "Markup- bringToFront API- Bringing to front the specified markup.",
    "MARKUP_LOGGER_sendToBack": "Markup- sendToBack API- Sending to back the specified markup.",
    "MARKUP_LOGGER_setVisibility": "Markup- setVisibility API- Updating the visibility state for the specified markup.",
    "MARKUP_LOGGER_latest_setVisibility": "Markup- setVisibility API- Updated the visibility state for the specified markup.",
    "MARKUP_LOGGER_getVisibility": "Markup- getVisibility API- Finding the visibility state for the specified markup.",
    "MARKUP_LOGGER_warn_getVisibility": "Markup- getVisibility API- Markup object with the given id is either undefined or null.",
    "MARKUP_LOGGER_setHTMLPosition": "Markup- setHTMLPosition API- Updating the position of the specified markup.",
    "MARKUP_LOGGER_setAnchorPosition": "Markup- setAnchorPosition API- Updating the anchor position of the specified markup.",
    "MARKUP_LOGGER_getHTMLPosition": "Markup- getHTMLPosition API- Finding the  position of the specified markup.",
    "MARKUP_LOGGER_getAnchorPosition": "Markup- getAnchorPosition API- Finding the  anchor position of the specified markup.",
    "MARKUP_LOGGER_getContent": "Markup- getContent API- Finding the content of the specified markup.",
    "MARKUP_LOGGER_setContent": "Markup- setContent API- Setting the content of the specified markup.",
    "MARKUP_LOGGER_setAnchoredHTMLPositions": "Markup- setAnchoredHTMLPositions API-Updating  both the position and anchor position of the specified markup.",
    "MARKUP_LOGGER_setAnchoredHTMLOnTop": "Markup- setAnchoredHTMLOnTop API- Updating the onTop state for the specified markup.",
    "MARKUP_LOGGER_getAnchoredHTMLOnTop": "Markup- getAnchoredHTMLOnTop API- Returning the onTop state for the specified markup.",
    "MARKUP_LOGGER_finest_getAnchoredHTMLOnTop": "Markup- getAnchoredHTMLOnTop API- onTop state for the specified markup is returned successfully.",
    "MARKUP_LOGGER_warn_getAnchoredHTMLOnTop": "Markup- getAnchoredHTMLOnTop API- Markup object is undefined.",
    "MARKUP_LOGGER_setAnchoredHTMLsOnTop": "Markup- setAnchoredHTMLsOnTop API-Updating whether the html markups should all be on top or not from the given parameter.",
    "MARKUP_LOGGER_getAnchoredHTMLsOnTop": "Markup- getAnchoredHTMLsonTop API-Finding whether the html markups should all be on top or not.",
    "MARKUP_LOGGER_setPositionByViewCoordinates": "Markup- setPositionByViewCoordinates API-Updating the position of the specified markup relative to the current view.",
    "MARKUP_LOGGER_addSprite": "Markup- addSprite API-Adding a sprite markup to the scene.",
    "MARKUP_LOGGER_setOwnerName": "Markup- setOwnerName API- Setting the owner of the text for the specified markup.",
    "MARKUP_LOGGER_setHTMLLockPosition": "Markup- setHTMLLockPosition API- Sets the specified markup anchored html to lock its text position.",
    "MARKUP_LOGGER_getHTMLLockPosition": "Markup- geHTMLLockPosition API- Gets if the specified markup anchored html is to lock its text position.",
    "MARKUP_LOGGER_setTouchMonitorDragDropHTML": "Markup- setTouchMonitorDragDropHTML API-touch monitor drag and drop for HTML.",
    "MARKUP_LOGGER_clearSelected": "Markup- clearSelected API-Clears all markup object selection.",
    "MARKUP_LOGGER_psIdExists": "Markup- psID already exists.",
    "MATERIAL_LOGGER_getMaterial": "_getMaterial is deprecated for internal use and will be removed after the 1.7.1 release. Objects should reference the material pool, not single materials or material arrays.",
    "MOUSEINPUT_LOGGER_doMouseDown": "Mouse Input, Down",
    "MOUSEINPUT_LOGGER_doMouseMove": "Mouse Input, Move",
    "MOUSEINPUT_LOGGER_doMouseUp": "Mouse Input, Up",
    "MOUSEINPUT_LOGGER_doMouseScroll": "Mouse Input, Scroll",
    "MOUSEINPUT_LOGGER_doMouseContextMenu": "Mouse Input, ContextMenu",
    "TOUCHINPUT_LOGGER_doTouchStart": "Touch Input, Start",
    "TOUCHINPUT_LOGGER_doTouchEnd": "Touch Input, End",
    "TOUCHINPUT_LOGGER_doTouchMove": "Touch Input, Move",
    "DAC_LOGGER_finest_doesPrototypeExist": " Checking if Prototype exists with ProtoId: ",
    "DAC_LOGGER_finest_createPrototype": " New Prototype created with ProtoId: ",
    "DAC_LOGGER_finest_updatePrototype": " Updating Prototype with ProtoId: ",
    "DAC_LOGGER_finest_deletePrototype": " Deleting Prototype and associated Nodes with ProtoId: ",
    "DAC_LOGGER_finest_doesNodeExist": " Checking if Node exists with PsId: ",
    "DAC_LOGGER_finest_createNode": " New Node created with PsId: ",
    "DAC_LOGGER_finest_updateNode": " Updating Node with PsId: ",
    "DAC_LOGGER_finest_deleteNode": " Deleting Node with PsId: ",
    "DAC_LOGGER_warn_invalidPsId": " Invalid node PsId:",
    "DAC_LOGGER_warn_invalidProtoId": "Invalid parent ProtoId: ",
    "DAC_LOGGER_warn_invalidInstanceId": " Invalid instance PsId: ",
    "DAC_LOGGER_warn_invalidParent": " Invalid parent PsId: ",
    "DAC_LOGGER_warn_convertingIdType": " Provided PsId was found to not be of type String: ",
    "DAC_LOGGER_error_incorrectIdType": " Id must be a string: ",
    "DAC_LOGGER_error_bodyChildCreation": " Prototype parent cannot be a body.",
    "DAC_LOGGER_error_bodyCreation": " Body instances cannot be directly created. They must be created by adding Body prototypes to Part Prototypes.",
    "DAC_LOGGER_error_xtCreation": "Face/Edge/Vertex shapes cannot be instanced.",
    "CACHELOADEREXT_LOGGER_finest_openCacheDB": "DB Cache opened: ",
    "CACHELOADEREXT_LOGGER_finest_retrieved": "record retrieved, VALUE: PENDING COUNT:  ",
    "CACHELOADEREXT_LOGGER_finest_saved": "record added ID:, PENDING COUNT: ",
    "CACHELOADEREXT_LOGGER_finest_db_Open": " cache open ",
    "CACHELOADEREXT_LOGGER_fine_readFinished": "cache read finished ",
    "CACHELOADEREXT_LOGGER_fine_deleteSuccess": "delete success",
    "CACHELOADEREXT_LOGGER_fine_cachingFinished": "caching finished ",
    "CACHELOADEREXT_LOGGER_warn_unableToOpenCache": "Unable to open DB Cache ",
    "CACHELOADEREXT_LOGGER_warn_failedToFindCacheRecord": "Failed to get record ",
    "CACHELOADEREXT_LOGGER_warn_failedToAddCacheRecord": "Failed to add record VALUE: , ERROR: ",
    "CACHELOADEREXT_LOGGER_warn_purgeError": "purge error",
    "CACHELOADEREXT_LOGGER_warn_purgeBlocked": "Couldn't delete database due to the operation being blocked",
    "CACHELOADEREXT_LOGGER_warn_errorFired": "error fired",
    "CACHELOADEREXT_LOGGER_warn_cacheOpenFailed": "Open failed",
    "CACHELOADEREXT_LOGGER_warn_mustCallStart": "Must initialize with Start()",
    "CACHELOADEREXT_LOGGER_warn_cacheStatusFail": " error checking cache status ",
    "CACHELOADEREXT_LOGGER_warn_mustCallOpen": "Must initialize with Open()",
    "CACHELOADEREXT_LOGGER_warn_badPut": "Invalid state or args on Put ",
    "CACHELOADEREXT_LOGGER_warn_badGet": "Invalid state or args on Get",
    "CACHELOADEREXT_LOGGER_warn_failedToGetModelList": "error getting model List",
    "LIGHTING_LOGGER_setDefault": "setDefault API- set default lights",
    "LIGHTING_LOGGER_getAll": "getAll API- get all existing lights",
    "LIGHTING_LOGGER_removeAll": "removeAll API- remove all existing lights",
    "LIGHTING_LOGGER_get": "get API- get a light by psId",
    "LIGHTING_LOGGER_remove": "remove API- remove a light by psId",
    "LIGHTING_LOGGER_add": "add API- add a new light",
    "LIGHTING_LOGGER_modify": "modify API- modify an exiting light",
    "SGOMANAGER_LOGGER_noBBox": "SGOManager found no valid SGO bounding box to include into the global",
    "MATERIAL_LOGGER_FAILURE_putFail": "Failed to add material definition to material pool hash map, key already exists",
    "MATERIAL_LOGGER_EXCEPTION_noUniforms": "Update failed, material has no uniforms",
    "VISUALREPORT_LOGGER_createReport": "VisualReport - createReport API: ",
    "VISUALREPORT_LOGGER_deleteReport": "VisualReport - deleteReport API: ",
    "VISUALREPORT_LOGGER_getActiveReport": "VisualReport - getActiveReport API: ",
    "VISUALREPORT_LOGGER_setReportActive": "VisualReport - setReportActive API: ",
    "VISUALREPORT_LOGGER_updateReport": "VisualReport - updateReport API: ",
    "VISUALREPORT_LOGGER_noPropertiesLoaded": "VisualReport - createReport API: Properties class detected as not loaded - terminating create report",
    "XR_moveDeviceInstruction": "Move device to find surface"
}
